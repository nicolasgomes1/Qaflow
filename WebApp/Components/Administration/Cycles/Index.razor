@page "/project/{ProjectId:int}/Cycles"
@using WebApp.Components.Pages.RequirementsSpecification
@rendermode InteractiveServer
@attribute [Authorize]
@inject CyclesModel CyclesModel
<RadzenDataGrid TItem="Cycles"
                Data="_cycles"
                Density="Density.Compact"
                AllowSorting="true"
                AllowFiltering="true"
                AllowPaging="true"
                PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Left"
                AllowVirtualization="true"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value="@_selectedcycle"
                ShowPagingSummary="true"
                FilterMode="FilterMode.Advanced"
                LogicalFilterOperator="LogicalFilterOperator.Or">

    <HeaderTemplate>
        <CyclesDialogCreate Title="Cycles" ProjectId="ProjectId"
                            OnCycleCreated="() => RefreshPage()"/>
        <DeleteallDataForModel EntityName="@nameof(Cycles)" EntityList="@_cycles"/>


    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Cycles.Id)" Title="Id" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(Cycles.Name)" Title="Name" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(Cycles.StartDate)" FormatString="{0:dd/MM/yyyy}" Title="Start"
                              Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(Cycles.EndDate)" FormatString="{0:dd/MM/yyyy}" Title="End"
                              Width="auto"/>
        <RadzenDataGridColumn Filterable="false" Width="auto" Title="Days">
            <Template Context="ctx">
                <RadzenBadge IsPill="true">
                    @{
                        TimeSpan difference = ctx.EndDate.Date - ctx.StartDate.Date;
                    }
                    @difference.Days
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>


        <!-- Action Buttons column -->

        <RadzenDataGridColumn TItem="Cycles" Sortable="false" Filterable="false" Resizable="false" Width="100px">
            <Template Context="cycle">
                <div style="display: flex; gap: 5px;">
                    <CyclesDialogView Id="@cycle.Id"/>
                    <CyclesDialogEdit Id="@cycle.Id"
                                      OnRequirementSpecificationUpdated="() => RefreshPage()"
                                      IsDisabled="@(HasTestPlans(cycle))"/>
                    <CyclesDialogDelete Id="@cycle.Id"
                                        OnRequirementDeleted="() => RefreshPage()"
                                        IsDisabled="@(HasTestPlans(cycle))"/>
                </div>
            </Template>
        </RadzenDataGridColumn>


    </Columns>
</RadzenDataGrid>

@code {
    [EditorRequired] [Parameter] public int ProjectId { get; set; }

    IEnumerable<Cycles>? _cycles = [];
    private IList<Cycles> _selectedcycle = [];

    private async Task RefreshPage()
    {
        _cycles = await CyclesModel.GetCyclesByProjectId(ProjectId);

        // Refresh the Home component (re-render it)
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _cycles = await CyclesModel.GetCyclesByProjectId(ProjectId);
    }

    bool HasTestPlans(Cycles cycle)
    {
        using var db = DbContext.CreateDbContextAsync();
        return db.Result.TestPlans.Any(tp => tp.CycleId == cycle.Id);
    }


}