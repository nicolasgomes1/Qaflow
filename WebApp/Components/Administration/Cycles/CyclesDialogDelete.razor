@attribute [Authorize]
<RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Style="color: red;"
              data-testid="delete"
              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, $"Delete {nameof(Cycles)}"))"
              MouseLeave="@AppTooltipService.HideTooltip"
              Click="@(() => DeleteItem(Id))"
              Disabled="@(IsDisabled)"
              Size="ButtonSize.ExtraSmall"/>

@code {
    [EditorRequired] [Parameter] public int Id { get; set; }
    [EditorRequired] [Parameter] public EventCallback OnRequirementDeleted { get; set; }
    [EditorRequired] [Parameter] public bool IsDisabled { get; set; }

    private async Task DeleteItem(int item)
    {
        var confirmed = await DialogService.Confirm(
            $"Are you sure you want to delete this {nameof(CyclesModel)}?",
            $"Delete {nameof(Cycles)}");

        if (confirmed is true)
        {
            var canDelete = await CyclesModel.DeleteCycle(item);

            if (OnRequirementDeleted.HasDelegate)
            {
                await OnRequirementDeleted.InvokeAsync();
            }

            switch (canDelete)
            {
                case false:
                    await FormNotificationService.NotifyError("Can't delete cycle as it is being used");
                    break;
                case true:
                    await FormNotificationService.NotifySuccess($"Cycle with Id {item} was successfully deleted");
                    break;
            }
        }
    }

}