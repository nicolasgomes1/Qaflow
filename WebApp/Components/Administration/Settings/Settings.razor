@page "/Gridsettings"
@rendermode InteractiveServer

<RadzenDataGrid @ref="_gridSettingsGrid"
                EditMode="@_editMode"
                Data="@_gridSettings"
                TItem="GridSettings"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                ColumnWidth="auto"
                Density="Density.Compact">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Grid Setting" Click="@InsertRow"
                      Disabled="@(_editMode == DataGridEditMode.Single && _gridSettingsToInsert.Any())"/>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="Id" Title="ID" Width="120px" Frozen="true"/>
        <RadzenDataGridColumn Property="UserName" Title="User Name" Width="280px"/>

        <RadzenDataGridColumn Property="GridName" Title="Grid Name" Width="220px">
            <EditTemplate Context="gridSetting">
                <RadzenDropDown @bind-Value="gridSetting.GridName"
                                Data="@(new List<string> { "Requirements", "TestCases" })" Style="width:100%;"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="IsCompactMode" Title="Compact Mode" Width="150px">
            <EditTemplate Context="gridSetting">
                <RadzenCheckBox @bind-Value="gridSetting.IsCompactMode"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="IsVirtualizationEnabled" Title="Virtualization" Width="150px">
            <EditTemplate Context="gridSetting">
                <RadzenCheckBox @bind-Value="gridSetting.IsVirtualizationEnabled"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="IsFilterEnabled" Title="Filter Enabled" Width="150px">
            <EditTemplate Context="gridSetting">
                <RadzenCheckBox @bind-Value="gridSetting.IsFilterEnabled"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="IsSortingEnabled" Title="Sorting Enabled" Width="150px">
            <EditTemplate Context="gridSetting">
                <RadzenCheckBox @bind-Value="gridSetting.IsSortingEnabled"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="gridSetting" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
                              Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="gridSetting">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@(args => EditRow(gridSetting))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                              Click="@(args => DeleteRow(gridSetting))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="gridSetting">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" Click="@(args => SaveRow(gridSetting))" aria-label="Save">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                              Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                              Click="@(args => CancelEdit(gridSetting))" aria-label="Cancel">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                              Click="@(args => DeleteRow(gridSetting))" aria-label="Delete">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<GridSettings> _gridSettingsGrid;
    IEnumerable<GridSettings> _gridSettings = new List<GridSettings>(); // Use IEnumerable for compatibility
    readonly List<GridSettings> _gridSettingsToInsert = new(); // For tracking inserted rows

    readonly DataGridEditMode _editMode = DataGridEditMode.Single;

    protected override async Task OnInitializedAsync()
    {
        await LoadGridSettings();
    }

    async Task LoadGridSettings()
    {
        await using var dbContext = await DbContext.CreateDbContextAsync();
        var user = UserService.GetCurrentUserInfoAsync().Result.UserName;

        if (string.IsNullOrEmpty(user))
            throw new Exception("User not found");

        _gridSettings = await dbContext.GridSettings
            .Where(gs => gs.UserName == user)
            .ToListAsync();
    }

    async Task InsertRow()
    {
        if (_editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var user = UserService.GetCurrentUserInfoAsync().Result.UserName!;
        var newGridSetting = new GridSettings
        {
            UserName = user,
            CreatedBy = user
        };

        if (string.IsNullOrEmpty(newGridSetting.UserName))
            throw new Exception("User not found");

        _gridSettingsToInsert.Add(newGridSetting);
        await _gridSettingsGrid.InsertRow(newGridSetting);
    }

    void Reset()
    {
        _gridSettingsToInsert.Clear();
    }

    async Task EditRow(GridSettings gridSetting)
    {
        if (_editMode == DataGridEditMode.Single && _gridSettingsToInsert.Any())
        {
            Reset();
        }

        await _gridSettingsGrid.EditRow(gridSetting);
    }

    async Task SaveRow(GridSettings gridSetting)
    {
        await using var dbContext = await DbContext.CreateDbContextAsync();

        // Check for duplicate (excluding current ID)
        var exists = await dbContext.GridSettings.AnyAsync(gs =>
            gs.UserName == gridSetting.UserName &&
            gs.GridName == gridSetting.GridName &&
            gs.Id != gridSetting.Id);

        if (exists)
        {
            await FormNotificationService.NotifyError("A setting with the same name already exists.");
            return;
        }

        var user = UserService.GetCurrentUserInfoAsync().Result.UserName!;


        if (gridSetting.Id == 0) // New record
        {
            dbContext.Add(gridSetting);
        }
        else // Update existing record
        {
            gridSetting.ModifiedBy = user;
            gridSetting.ModifiedAt = DateTime.Now;
            dbContext.Update(gridSetting);
        }

        await dbContext.SaveChangesAsync();

        // Reload grid data to reflect changes
        await LoadGridSettings();
        await _gridSettingsGrid.Reload();

        _gridSettingsToInsert.Remove(gridSetting);
    }


    async Task DeleteRow(GridSettings gridSetting)
    {
        await using var dbContext = await DbContext.CreateDbContextAsync();

        dbContext.Remove(gridSetting);
        await dbContext.SaveChangesAsync();

        _gridSettings = _gridSettings.Where(gs => gs.Id != gridSetting.Id).ToList();
        await _gridSettingsGrid.Reload();
    }

    async Task OnCreateRow(GridSettings gridSetting)
    {
        await using var dbContext = await DbContext.CreateDbContextAsync();

        dbContext.Add(gridSetting);
        await dbContext.SaveChangesAsync();

        // Reload grid data to include the new row
        await LoadGridSettings();
        await _gridSettingsGrid.Reload();

        _gridSettingsToInsert.Remove(gridSetting);
    }


    async Task OnUpdateRow(GridSettings gridSetting)
    {
        await using var dbContext = await DbContext.CreateDbContextAsync();

        dbContext.Update(gridSetting);
        await dbContext.SaveChangesAsync();

        // Reload grid data to reflect changes
        await LoadGridSettings();
        await _gridSettingsGrid.Reload();

        _gridSettingsToInsert.Remove(gridSetting);
    }

    Task CancelEdit(GridSettings gridSetting)
    {
        Reset(gridSetting);
        _gridSettingsGrid.CancelEditRow(gridSetting);
        return Task.CompletedTask;
    }

    void Reset(GridSettings gridSetting)
    {
        _gridSettingsToInsert.Remove(gridSetting);
    }

}
