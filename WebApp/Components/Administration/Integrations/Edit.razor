@page "/integrations/edit/{Id:int}"
@attribute [Authorize]
@rendermode InteractiveServer
@inject ILogger<Edit> Logger
@attribute [Authorize(Roles = "Admin , Manager")]

<RadzenTemplateForm Data="_integrations" TItem="Integrations" Submit="UpdateIntegration">
    <h3 class="text-center text-primary mb-4">Edit Integration</h3>
    <ValidationSummary class="alert alert-danger"/>

    <div class="form-group mb-4">
        <RadzenLabel Text="Base Url"/>
        <RadzenTextBox id="base-url"
                       @bind-Value="_integrations.BaseUrl"
                       Name="name"/>
        <RadzenRequiredValidator Component="name" Text="Base URL is required"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Username"/>
        <RadzenTextBox id="username"
                       @bind-Value="_integrations.Username"
                       Name="name"/>
        <RadzenRequiredValidator Component="name" Text="Base URL is required"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Api Key"/>
        <RadzenTextBox id="apikey"
                       @bind-Value="_integrations.ApiKey"
                       Name="apikey"/>
        <RadzenRequiredValidator Component="apikey" Text="API KEY is required"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Integration Type"/>
        <RadzenDropDown id="integration-type"
                        @bind-Value="_integrations.IntegrationType"
                        Data="EnumService.GetEnumValues<IntegrationType>()"
                        Name="integration-type"/>
        <RadzenRequiredValidator Component="integration-type" Text="Integration Type is required"/>
    </div>

    <CreateEditActions EntityName="integrations" CreateEdit="Update"/>
</RadzenTemplateForm>


@code {
    [Parameter] public int Id { get; set; }
    private Integrations _integrations = new();

    protected override async Task OnInitializedAsync()
    {
        _integrations = await IntegrationsModel.GetIntegrationByIdAsync(Id);
    }

    private async Task UpdateIntegration()
    {
        await IntegrationsModel.UpdateIntegration(_integrations);
        NavigationManager.NavigateTo("/integrations");
        await FormNotificationService.NotifySuccess("Integration updated successfully");
        Logger.LogInformation("Integration was updated");
    }

}