@page "/Users/Create"
@using Microsoft.AspNetCore.WebUtilities
@attribute [Authorize(Roles = "Admin")]
@inject ILogger<Create> Logger

@rendermode InteractiveServer

<AlertTitle TitleText="Creating new User"></AlertTitle>

<RadzenTemplateForm Data="@Input" TItem="InputModel" Submit="@HandleValidSubmit" Style="margin: 20px;">

    <DataAnnotationsValidator/>
    <ValidationSummary class="alert alert-danger"/>


    <div class="row mb-4 col-12">
        <RadzenLabel Text="Username"/>
        <RadzenTextBox id="username"
                       data-testid="user_username"
                       @bind-Value="Input.UserName"
                       Placeholder="Username"/>
        <ValidationMessage For="() => Input.UserName" class="text-danger"/>
    </div>

    <div class="row mb-4 col-12">

        <RadzenLabel Text="Password"/>
        <RadzenTextBox id="password"
                       data-testid="user_password"
                       @bind-Value="Input.Password" Type="password" Placeholder="Password"/>
        <ValidationMessage For="() => Input.Password" class="text-danger"/>
    </div>

    <div class="row mb-4 col-12">
        <RadzenLabel Text="Email"/>
        <RadzenTextBox id="email"
                       data-testid="user_email"
                       @bind-Value="Input.Email" Placeholder="Email"/>
        <ValidationMessage For="() => Input.Email" class="text-danger"/>
    </div>

    <div class="row mb-4 col-12">

        <RadzenLabel Text="Role"/>
        <RadzenDropDown
            data-testid="user_role"
            id="role" @bind-Value="Input.Role" Data="@_allRoles"/>
        <ValidationMessage For="() => Input.Role" class="text-danger"/>
    </div>

    <div class="row mb-4 col-12">

        <RadzenLabel Text="Confirmed Email?"/>
        <RadzenCheckBox
            data-testid="email_confirmed"
            @bind-Value="Input.EmailConfirmed"/>
    </div>

    <CreateEditActions CreateEdit="Create" EntityName="users"/>

</RadzenTemplateForm>

@code {
    private List<string?> _allRoles = [];
    private InputModel Input { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        _allRoles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
    }


    private static string CancelUrl()
    {
        return "/Users/Index";
    }

    private async Task HandleValidSubmit()
    {
        var user = new ApplicationUser
        {
            UserName = Input.UserName,
            Email = Input.Email,
            EmailConfirmed = Input.EmailConfirmed
        };

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                Logger.LogError("Error creating user: {Error}", error.Description);
            }

            return;
        }

        Logger.LogInformation("User created successfully.");

        // Send confirmation email only if user is not confirmed
        if (!Input.EmailConfirmed)
        {
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?>
                {
                    ["userId"] = user.Id,
                    ["code"] = code
                });

            var encodedUrl = HtmlEncoder.Default.Encode(callbackUrl);
            await EmailSender.SendConfirmationLinkAsync(user, user.Email, encodedUrl);
            await EmailService.SendUserEmailLinkAsync(user.Email, "Confirm your email", $"Please click <a href='{encodedUrl}'>here</a> to confirm your email.");
        }

        // Add to role if selected
        if (!string.IsNullOrWhiteSpace(Input.Role))
        {
            var roleResult = await UserManager.AddToRoleAsync(user, Input.Role);
            if (!roleResult.Succeeded)
            {
                Logger.LogError("Error adding user to role: {Errors}", string.Join(", ", roleResult.Errors.Select(e => e.Description)));
            }
        }

        await UserNotification.NotifySuccess("User was created successfully.");
        NavigationManager.NavigateTo("/Users/Index");
    }

    private class InputModel
    {
        [Required(ErrorMessage = "The Username field is required.")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "The Password field is required.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "The Email field is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "The Role field is required.")]
        public string Role { get; set; } = string.Empty;

        public bool EmailConfirmed { get; set; }
    }

}