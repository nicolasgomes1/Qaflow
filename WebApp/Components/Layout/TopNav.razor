@rendermode InteractiveServer
@implements IDisposable
<RadzenMenu Style="display: flex; justify-content: flex-end; align-items: center; width: 100%;">
    @if (!_isAuthenticated)
    {
        <RadzenStack Orientation="Orientation.Horizontal" Style="margin-right: 10px;" AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center">
            <RadzenMenuItem data-testid="login_top" Text="Login" Click=GotoLogin></RadzenMenuItem>
            <RadzenMenuItem data-testid="register_top" Text="Register" Click=GotoRegister></RadzenMenuItem>
        </RadzenStack>
    }

    @code{

        void ReturnToHome()
        {
            if (ProjectId is 0)
            {
                NavigationManager.NavigateTo("/");
                FormNotificationService.NotifyInfo("Returning to the Hub Home Page as no Project is selected");
                return;
            }

            NavigationManager.NavigateTo($"/project/{ProjectId}");
            FormNotificationService.NotifyInfo("Returning to Home Page");
        }

    }


    @if (_isAuthenticated)
    {
        <RadzenStack Orientation="Orientation.Horizontal"
                     Style="margin: 10px 0 10px 10px; width: calc(100% - 20px); justify-content: flex-start; align-items: center; gap: 10px;">
            <div data-testid="logo" style="max-height: 50px; display: flex; align-items: center;"
                 @onclick="ReturnToHome">
                <Logo/>
            </div>
        </RadzenStack>

        <article class="bottom-row px-4">
            <CultureSelector @rendermode="InteractiveServer"/>
        </article>

        <div style="display: flex; align-items: center; gap: 10px;">
            @if (_isAdmin)
            {
                <RadzenMenu>
                    <RadzenMenuItem Text="General" Icon="badge" data-testid="admin_menu">
                        <RadzenMenuItem Text="Manage Account" data-testid="manage_account" Icon="account_circle"
                                        Path="/Account/Manage"/>
                        <RadzenMenuItem Text="Manage Users" data-testid="manage_users" Icon="account_circle"
                                        Path="/Users/Index"/>
                        <RadzenMenuItem Text="Cycles" data-testid="manage_cycles" Icon="cycle" Path="@path"
                                        Disabled="HasNotProjectSet()"/>


                        <div style="border-bottom: 1px solid #e0e0e0; margin: 5px 0;"></div>
                        <RadzenMenuItem Icon="settings" data-testid="manage_settings" Text="QAFlow Settings" Path="/settings"></RadzenMenuItem>

                        @if (HasOwnIntegrationsEnabled)
                        {
                            <RadzenMenuItem Icon="api" Text="Api's" Path="/scalar/v1" Target="_blank" data-testid="manage_api"></RadzenMenuItem>
                        }
                        
                        @if (HasExternalIntegrationsEnabled)
                        {
                            <RadzenMenuItem Icon="cloud_circle" Text="Integrations" Path="/integrations" data-testid="manage_integrations"/>
                        }
                        <RadzenMenuItem Icon="visibility" Text="@Loc["ViewProfile"]" Path="@UserProfileUri()"/>
                        <Timeline/>
                    </RadzenMenuItem>
                </RadzenMenu>
            }
            @if (_isUser)
            {
                <RadzenMenu>
                    <RadzenMenuItem Text="General" Icon="badge">
                        <RadzenMenuItem Icon="visibility" Text="@Loc["ViewProfile"]" Path="@UserProfileUri()"/>
                        <Timeline/>
                    </RadzenMenuItem>
                </RadzenMenu>
            }
            @if (_isManager)
            {
                <RadzenMenu>
                    <RadzenMenuItem Text="General" Icon="badge">
                        <RadzenMenuItem Icon="api" Text="Api's" Path="/scalar/v1" Target="_blank"></RadzenMenuItem>
                        <RadzenMenuItem Icon="cloud_circle" Text="Integrations" Path="/integrations"/>
                        <RadzenMenuItem Icon="visibility" Text="@Loc["ViewProfile"]" Path="@UserProfileUri()"/>
                        <Timeline/>
                    </RadzenMenuItem>
                </RadzenMenu>
            }
            <RadzenMenuItem Click=GoToProjects Text="@ProjectId.ToString()" Icon="hub"
                            IconColor="orange"
                            MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Return to Hub"))"
                            MouseLeave="@AppTooltipService.HideTooltip"/>

            <RealTimeClock/>

            <div class="nav-item px-3">
                <form action="/Account/Logout" method="post" style="display:inline;" id="logoutForm">
                    <AntiforgeryToken/>
                    <input type="hidden" name="ReturnUrl"/>
                    <RadzenButton data-testid="logout" Icon="logout" ButtonType="ButtonType.Submit"/>
                </form>
            </div>

            <script>
                document.getElementById("logoutForm").addEventListener("submit", function () {
                    // Clear localStorage when the logout form is submitted
                    localStorage.clear();
                });
            </script>


        </div>
    }
</RadzenMenu>

@code {
    private bool _isAuthenticated;
    private bool _isAdmin; // Flag to check if the user is an Admin
    private bool _isUser; // Flag to check if the user is a User
    private bool _isManager; // Flag to check if the user is a Manager
    [Parameter] public int ProjectId { get; set; }

    private List<QAflowSettings> _qAflowSettingsList = [];

    string path => $"/project/{ProjectId}/Cycles";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProjectId = await ProjectState.GetCurrentProjectAsync(); // Load Project ID
            StateHasChanged(); // Ensure UI updates
        }
    }

    private bool HasExternalIntegrationsEnabled => _qAflowSettingsList.Any(t => t is { QAflowOptionsSettings: QAflowOptionsSettings.ExternalIntegrations, IsIntegrationEnabled: true });
    private bool HasOwnIntegrationsEnabled => _qAflowSettingsList.Any(t => t is { QAflowOptionsSettings: QAflowOptionsSettings.OwnIntegrations, IsIntegrationEnabled: true });



    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthenticationState();
        StateHasChanged(); // Ensure UI updates
        _qAflowSettingsList = await QAflowSettingsModel.GetApplicationSettingsAsync();
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async Task GoToProjects()
    {
        await ProjectState.ResetCurrentProjectAsync();
        //  ProjectStateService.ClearProjectId();
        NavigationManager.NavigateTo("/", true);
    }

    private async Task UpdateAuthenticationState()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _isAuthenticated = user.Identity is { IsAuthenticated: true };

        // Check if the user is in the Admin role
        _isAdmin = user.IsInRole("Admin");
        _isUser = user.IsInRole("User");
        _isManager = user.IsInRole("Manager");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void GotoLogin()
    {
        NavigationManager.NavigateTo("/Account/Login", true);
    }

    private void GotoRegister()
    {
        NavigationManager.NavigateTo("/Account/Register", true);
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    string UserProfileUri()
    {
        var user = UserService.GetCurrentUserInfoAsync().Result.UserId;

        return string.IsNullOrEmpty(user) switch
        {
            false => $"/Users/View/{user}",
            _ => throw new Exception("User not found")
        };
    }

    private bool HasNotProjectSet()
    {
        if (ProjectId == 0)
            return true;
        return false;
    }

}