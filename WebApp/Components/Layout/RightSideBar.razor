@rendermode InteractiveServer
<!-- Right Sidebar, positioned within the body -->

<AuthorizeView>
    <Authorized>
        @if (ShouldRenderRightSidebarRequirements())
        {
            <div style="position: absolute; top: 60px; right: 0; bottom: 50px; z-index: 999; overflow-y: auto;">


                <!-- Floating button to toggle the sidebar -->
                <div style="position: fixed; bottom: 60px; right: 10px; z-index: 1000;">
                    <RadzenButton Icon="menu" Click="@(() => OpenSideDialog(ProjectId))"/>
                </div>
            </div>
        }
        else if (ShouldRenderRightSidebarTestPlans())
        {
            <div style="position: absolute; top: 60px; right: 0; bottom: 50px; z-index: 999; overflow-y: auto;">
                <RadzenSidebar Style="@GetSidebarStyle()">
                    <RadzenPanelMenu Style="background-color: #f0f0f0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                        <TestPlansTree ProjectId="ProjectId"/>
                    </RadzenPanelMenu>
                </RadzenSidebar>

                <!-- Floating button to toggle the sidebar -->
                <div style="position: fixed; bottom: 60px; right: 10px; z-index: 1000;">
                    <RadzenButton Icon="menu" Click="@(() => _rightSidebarExpanded = !_rightSidebarExpanded)"/>
                </div>
            </div>
        }

    </Authorized>

</AuthorizeView>





@code {
    [Parameter] public int ProjectId { get; set; }
    private bool _firstRender = true; // Track first render

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _firstRender = false; // Set to false so it doesn't run again
            ProjectId = await ProjectState.GetCurrentProjectAsync(); // Load Project ID
            StateHasChanged(); // Ensure UI updates
        }
    }


    private bool _rightSidebarExpanded = false; // Track the sidebar state

    // Build the dynamic style for the sidebar based on the state
    private string GetSidebarStyle()
    {
        return $"width: {(_rightSidebarExpanded ? "300px" : "0px")}; transition: width 0.3s ease; height: 100%; background-color: #f0f0f0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);";
    }

    private bool ShouldRenderRightSidebarRequirements()
    {
        // Get the current URI
        var uri = NavigationManager.Uri;

        // Check if the URI contains "requirements"
        return uri.Contains("requirements", StringComparison.OrdinalIgnoreCase);
    }

    private bool ShouldRenderRightSidebarTestPlans()
    {
        // Get the current URI
        var uri = NavigationManager.Uri;

        // Check if the URI contains "requirements"
        return uri.Contains("testplans", StringComparison.OrdinalIgnoreCase);
    }

    /*
    async Task OpenSideDialog(int projectId)
    {
        // Hardcoding options for right position, mask enabled, and close on overlay click
        await DialogService.OpenSideAsync<RequirementsTree>(
            "Project Requirements",
            options: new SideDialogOptions
            {
                CloseDialogOnOverlayClick = true,
                Position = DialogPosition.Right,
                ShowMask = true
            });
    }
    */

    async Task OpenSideDialog(int projectId)
    {
        var parameters = new Dictionary<string, object>
        {
            { "ProjectId", projectId } // Passing ProjectId to RequirementsTree
        };

        var options = new SideDialogOptions
        {
            CloseDialogOnOverlayClick = true,
            Position = DialogPosition.Right,
            ShowMask = true
        };

        await DialogService.OpenSideAsync<RequirementsTree>(
            "Project Requirements",
            parameters, // First pass parameters
            options // Then pass the options
        );
    }


}
