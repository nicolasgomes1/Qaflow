@attribute [Authorize]
@rendermode InteractiveServer
<!-- Right Sidebar, positioned within the body -->

<AuthorizeView>
    <Authorized>
        @if (ShouldRenderRightSidebarRequirements())
        {
            <div style="position: absolute; top: 60px; right: 0; bottom: 50px; z-index: 999; overflow-y: auto;">
                <RadzenSidebar Style="@GetSidebarStyle()">
                    <RadzenPanelMenu Style="background-color: #f0f0f0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                        <RequirementsTree ProjectId="ProjectId"/>
                    </RadzenPanelMenu>
                </RadzenSidebar>

                <!-- Floating button to toggle the sidebar -->
                <div style="position: fixed; bottom: 60px; right: 10px; z-index: 1000;">
                    <RadzenButton Icon="menu" Click="@(() => _rightSidebarExpanded = !_rightSidebarExpanded)"/>
                </div>
            </div>
        }
        else if (ShouldRenderRightSidebarTestPlans())
        {
            <div style="position: absolute; top: 60px; right: 0; bottom: 50px; z-index: 999; overflow-y: auto;">
                <RadzenSidebar Style="@GetSidebarStyle()">
                    <RadzenPanelMenu Style="background-color: #f0f0f0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                        <TestPlansTree ProjectId="ProjectId"/>
                    </RadzenPanelMenu>
                </RadzenSidebar>

                <!-- Floating button to toggle the sidebar -->
                <div style="position: fixed; bottom: 60px; right: 10px; z-index: 1000;">
                    <RadzenButton Icon="menu" Click="@(() => _rightSidebarExpanded = !_rightSidebarExpanded)"/>
                </div>
            </div>
        }

    </Authorized>

</AuthorizeView>





@code {
    [Parameter] public int ProjectId { get; set; }


    private bool _shouldRenderRequirementsSidebar;
    private bool _shouldRenderTestCasesSideBar;

    protected override void OnInitialized()
    {
        // Subscribe to location changes
        NavigationManager.LocationChanged += OnLocationChanged;
        _shouldRenderRequirementsSidebar = ShouldRenderRightSidebarTestPlans();
        _shouldRenderTestCasesSideBar = ShouldRenderRightSidebarRequirements();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged(); // Force re-render
    }

    private bool ShouldRenderRightSidebarRequirements()
    {
        return NavigationManager.Uri.Contains("requirements", StringComparison.OrdinalIgnoreCase);
    }

    private bool ShouldRenderRightSidebarTestPlans()
    {
        return NavigationManager.Uri.Contains("testplans", StringComparison.OrdinalIgnoreCase);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProjectId = await ProjectState.GetCurrentProjectAsync(); // Load Project ID
            StateHasChanged(); // Ensure UI updates
        }
    }


    private bool _rightSidebarExpanded = false; // Track the sidebar state

    // Build the dynamic style for the sidebar based on the state
    private string GetSidebarStyle()
    {
        return $"width: {(_rightSidebarExpanded ? "300px" : "0px")}; transition: width 0.3s ease; height: 100%; background-color: #f0f0f0; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);";
    }
    
}
