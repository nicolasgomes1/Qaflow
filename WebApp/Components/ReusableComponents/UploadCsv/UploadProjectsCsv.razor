@attribute [Authorize(Roles = "Admin, Manager")]
<RadzenButton Icon="csv" Click="OpenFileUpload"
              Visible="UiUserVisibility.IsAuthorized()"
              Variant="Variant.Outlined"
              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Upload projects data from csv"))"
              MouseLeave="@AppTooltipService.HideTooltip"/>

@code {
    private IEnumerable<Projects> _projects = [];
    private string _fileContent = string.Empty;

    /// <summary>
    /// Event callback to be invoked when the upload is completed. It will refresh the page on parent component.
    /// </summary>
    [Parameter]
    public EventCallback OnUploadCompleted { get; set; }

    private async Task OpenFileUpload()
    {
        var result = await DialogService.OpenAsync($"Import {nameof(Projects)} from CSV", ds =>
                @<RadzenStack Orientation="Orientation.Vertical">
                    <RadzenFieldset Text="Expected CSV format" Style="margin-bottom: 15px">
                        <table style="width:100%; border-collapse: collapse; font-size:14px; text-align:left;">
                            <thead style="background-color:#f5f5f5;">
                            <tr>
                                <th style="padding:6px; border:1px solid #ddd;">Name</th>
                                <th style="padding:6px; border:1px solid #ddd;">Description</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td style="padding:6px; border:1px solid #ddd;">My Project</td>
                                <td style="padding:6px; border:1px solid #ddd;">My Description</td>
                            </tr>
                            </tbody>
                        </table>

                        <div style="margin-top:10px; font-size:12px; color:gray;">
                            ⚠️ Ensure your CSV file includes these columns in the same order separated by commas.
                            <br/>
                            ⚠️ If Project already exists with same Name, it will be skipped.
                        </div>
                    </RadzenFieldset>
                    <RadzenUpload ChooseText="Choose CSV" Accept=".csv" Style="width: 100%" Icon="upload"
                                  Change="@(SaveFileContent)"/>
                    <RadzenButton Text="Submit" Icon="check" Click="ProcessCsvFile" Style="margin-top: 10px;"/>
                </RadzenStack>
            , new DialogOptions { CloseDialogOnOverlayClick = true, Draggable = true, CloseDialogOnEsc = true });
    }

    private async Task SaveFileContent(UploadChangeEventArgs args)
    {
        if (!args.Files.Any()) throw new Exception("No files found.");

        var file = args.Files.First();
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0;

        using var reader = new StreamReader(memoryStream);
        _fileContent = await reader.ReadToEndAsync();

        if (string.IsNullOrWhiteSpace(_fileContent))
        {
            await FormNotificationService.NotifyError("No file content found. Please upload a CSV file.");
        }
    }

    int _currentLine = 0;
    int _validLines;
    int _invalidLines;
    int _totalLines;

    private async Task ProcessCsvFile()
    {
        var csvlines = _fileContent.Split('\n').Skip(1);
        _totalLines = csvlines.Count();

        _projects = await ProjectModel.GetProjects();

        _currentLine = 0;
        _validLines = 0;
        _invalidLines = 0;

        foreach (var line in csvlines)
        {
            _currentLine++;

            if (string.IsNullOrWhiteSpace(line))
            {
                _invalidLines++;
                continue;
            }

            var values = line.Split(',');
            if (values.Length < 2)
            {
                _invalidLines++;
                continue;
            }

            var projects = new Projects
            {
                Name = values[0].Trim(),
                Description = values[1].Trim()
            };

            if (string.IsNullOrWhiteSpace(projects.Name) || string.IsNullOrWhiteSpace(projects.Description))
            {
                _invalidLines++;
                continue;
            }

            if (_projects.Any(r => r.Name == projects.Name && r.Description == projects.Description))
            {
                _invalidLines++;
                continue;
            }

            await ProjectModel.AddProjectFromCsv(projects);
            _validLines++;
        }

        DialogService.Close();
        await OnUploadCompleted.InvokeAsync();

        if (_validLines == 0)
        {
            await FormNotificationService.NotifyError($"No {nameof(Projects)} found in the CSV file.");
        }
        else
        {
            await FormNotificationService.NotifySuccess($"{nameof(Projects)} CSV imported successfully with {_validLines} blog posts and {_invalidLines} invalid lines.");
        }
    }


}