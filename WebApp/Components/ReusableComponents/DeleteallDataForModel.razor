@using Microsoft.Data.SqlClient
@inject ILogger<DeleteallDataForModel> Logger

<RadzenButton Icon="delete_forever"
              Click="@(DeleteAllModelData)"
              Size="ButtonSize.Medium"
              ButtonStyle="ButtonStyle.Danger"
              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Delete All"))"
              MouseLeave="@AppTooltipService.HideTooltip"/>


@inject TooltipService TooltipService

@code {

    [Parameter] public string EntityName { get; set; } = string.Empty;

    [Parameter] public IEnumerable<object> EntityList { get; set; } = new List<object>();

    private int _projectId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _projectId = await ProjectState.GetCurrentProjectAsync(); // Load Project ID
            StateHasChanged(); // Ensure UI updates
        }
    }

    private async Task DeleteAllModelData()
    {
        var entityName = EntityName.ToLower();
        var project = _projectId;

        await using var db = await DbContext.CreateDbContextAsync();

        var confirmed = await DialogService.Confirm($"Are you sure you want to delete all {EntityName}?", $"Delete All {EntityName}",
            new ConfirmOptions()
            {
                Draggable = true,
                CloseDialogOnEsc = true
            });
        if (confirmed == true)
        {
            try
            {
                db.RemoveRange(EntityList);


                switch (entityName)
                {
                    // Check if the entity being deleted is 'Requirement'
                    case "requirements":
                    {
                        Logger.LogInformation($"{UserInfo} deleted all Requirements on Time: {DateTime.Now}");

                        break;
                    }
                    case "testcases":
                    {
                        Logger.LogInformation($"{UserInfo} deleted all TestCases on Time: {DateTime.Now}");
                        break;
                    }
                    case "tesplans":
                    {
                        Logger.LogInformation($"{UserInfo} deleted all TestPlans on Time: {DateTime.Now}");
                        break;
                    }

                    case "bugs":
                    {
                        Logger.LogInformation($"{UserInfo} deleted all Bugs on Time: {DateTime.Now}");
                        break;
                    }
                }

                await db.SaveChangesAsync();
                NavigationManager.NavigateTo($"/project/{project}/{entityName}", true);
            }
            catch (Exception e)
            {
                await FormNotificationService.NotifyError($"Error {e}");
            }
        }
    }

    private string UserInfo => $"{UserService.GetCurrentUserInfoAsync().Result.UserName}";

}