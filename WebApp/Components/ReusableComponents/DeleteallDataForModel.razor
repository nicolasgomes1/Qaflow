@inject ILogger<DeleteallDataForModel> Logger

<RadzenButton Icon="delete_forever"
              Click="@(DeleteAllModelData)"
              Visible="@IsUserAdmin"
              Size="ButtonSize.Medium"
              data-testid="delete_all"
              ButtonStyle="ButtonStyle.Danger"
              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Delete All"))"
              MouseLeave="@AppTooltipService.HideTooltip"/>


@code {

    [EditorRequired] [Parameter] public string EntityName { get; set; } = string.Empty;

    [EditorRequired] [Parameter] public IEnumerable<object> EntityList { get; set; } = new List<object>();

    private int _projectId;
    private bool _isUserAdmin;
    private bool IsUserAdmin => _isUserAdmin;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _projectId = await ProjectState.GetCurrentProjectAsync(); // Load Project ID


            StateHasChanged(); // Ensure UI updates
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetCurrentUserInfoAsync();
        if(currentUser.UserId is null) return;
        _isUserAdmin = await UserService.IsUserAdmin(currentUser.UserId);
    }


    private async Task DeleteAllModelData()
    {
        var project = _projectId;


        var confirmed = await DialogService.Confirm($"Are you sure you want to delete all {EntityName}?", $"Delete All {EntityName}",
            new ConfirmOptions()
            {
                Draggable = true,
                CloseDialogOnEsc = true
            });
        if (confirmed == true)
        {
            try
            {
                await using var db = await DbContext.CreateDbContextAsync();

                foreach (var entity in EntityList)
                {
                    db.Remove(entity);
                }

                await db.SaveChangesAsync();


                switch (EntityName)
                {
                    // Check if the entity being deleted is 'Requirement'
                    case nameof(Requirements):
                    {
                        Logger.LogInformation($"{UserInfo} deleted all Requirements on Time: {DateTime.Now}");

                        break;
                    }
                    case nameof(TestCases):
                    {
                        Logger.LogInformation($"{UserInfo} deleted all TestCases on Time: {DateTime.Now}");
                        break;
                    }
                    case nameof(TestPlans):
                    {
                        Logger.LogInformation($"{UserInfo} deleted all TestPlans on Time: {DateTime.Now}");
                        break;
                    }

                    case nameof(Bugs):
                    {
                        Logger.LogInformation($"{UserInfo} deleted all Bugs on Time: {DateTime.Now}");
                        break;
                    }

                    case nameof(Cycles):
                    {
                        Logger.LogInformation($"{UserInfo} deleted all Cycles on Time: {DateTime.Now}");
                        break;
                    }
                }

                NavigationManager.NavigateTo($"/project/{project}/{EntityName}");
            }
            catch (Exception e)
            {
                await FormNotificationService.NotifyError($"Could not delete data as doing so would cause data integrity degradation");
                Logger.LogError("Error {Exception}", e);
            }
        }
    }

    private string UserInfo => $"{UserService.GetCurrentUserInfoAsync().Result.UserName}";

}