<RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenButton
                    data-testid="d_requirementsSpecification"
                    MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Requirements Specifications"))"
                    MouseLeave="@AppTooltipService.HideTooltip"
                    Icon="library_books"
                    ButtonStyle="ButtonStyle.Warning"
                    Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/requirementsspecification"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton
                    data-testid="d_requirements"
                    MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Requirements"))"
                    MouseLeave="@AppTooltipService.HideTooltip"
                    ButtonStyle="ButtonStyle.Warning"
                    Icon="assignment"
                    Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/requirements"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton
                    data-testid="d_requirementsworkflow"
                    MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Requirements Workflow"))"
                    MouseLeave="@AppTooltipService.HideTooltip"
                    ButtonStyle="ButtonStyle.Warning"
                    Icon="category"
                    Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/requirements/manage"))"/>
            </RadzenStack>

            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal"
                         JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_requirementsCount"/>
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_requirementsWithSpec"/>
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@($" {req}%")"/>

            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="max-width: 400px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical">
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal"
                         JustifyContent="JustifyContent.Center">
                <RadzenButton data-testid="d_testcases"
                              Icon="science"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Test Cases"))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/testcases"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="category"
                              data-testid="d_testcasesworkflow"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Test Cases Worflow"))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testcases/manage")'/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_testCasesCount"/>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                <RadzenBadge Variant="Variant.Outlined"
                             Text=@($"Acceptance {_testcaseByTypeAcceptance}")
                             MouseEnter=@(async args =>
                             {
                                 var apiTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.AcceptanceTest, TestScope.ApiTests);
                                 var dbTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.AcceptanceTest, TestScope.DatabaseTests);
                                 var uiTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.AcceptanceTest, TestScope.UiTests);

                                 RenderFragment Content(TooltipService ds)
                                 {
                                     return builder =>
                                     {
                                         builder.OpenElement(0, "div");
                                         builder.AddContent(1, $"API Tests: {apiTests}");
                                         builder.AddMarkupContent(2, "<br />");
                                         builder.AddContent(3, $"Database Tests: {dbTests}");
                                         builder.AddMarkupContent(4, "<br />");
                                         builder.AddContent(5, $"UI Tests: {uiTests}");
                                         builder.CloseElement();
                                     };
                                 }

                                 TooltipService.Open(args, (RenderFragment<TooltipService>)Content, new TooltipOptions
                                 {
                                     Position = TooltipPosition.Top,
                                     Duration = 10000
                                 });
                             })
                             MouseLeave="@TooltipService.Close"/>


                <RadzenBadge Variant="Variant.Outlined" Text=@($"Regression {_testcaseByTypeRegression}")/>
                <RadzenBadge Variant="Variant.Outlined"
                             Text=@($"Smoke {_testcaseByTypeSmoke}")
                             MouseEnter=@(async args =>
                             {
                                 var apiTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.SmokeTest, TestScope.ApiTests);
                                 var dbTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.SmokeTest, TestScope.DatabaseTests);
                                 var uiTests = await TestCasesReporting.GetTestCasesByTypeAndScope(ProjectId, TestTypes.SmokeTest, TestScope.UiTests);

                                 RenderFragment Content(TooltipService ds)
                                 {
                                     return builder =>
                                     {
                                         builder.OpenElement(0, "div");
                                         builder.AddContent(1, $"API Tests: {apiTests}");
                                         builder.AddMarkupContent(2, "<br />");
                                         builder.AddContent(3, $"Database Tests: {dbTests}");
                                         builder.AddMarkupContent(4, "<br />");
                                         builder.AddContent(5, $"UI Tests: {uiTests}");
                                         builder.CloseElement();
                                     };
                                 }

                                 TooltipService.Open(args, (RenderFragment<TooltipService>)Content, new TooltipOptions
                                 {
                                     Position = TooltipPosition.Top,
                                     Duration = 10000
                                 });
                             })
                             MouseLeave="@TooltipService.Close"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">

                <RadzenButton Icon="description"
                              data-testid="d_testplans"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["TestPlans"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              ButtonStyle="ButtonStyle.Info"
                              Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/testplans"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton Icon="category"
                              data-testid="d_testplansworkflow"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["manage.testplans"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              ButtonStyle="ButtonStyle.Info"
                              Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testplans/manage")'></RadzenButton>

            </RadzenStack>
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_testPlansCount"/>
            </RadzenStack>
        </RadzenStack>


    </RadzenCard>


    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">

        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenButton data-testid="d_testexecutions"
                              Icon="play_circle"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["TestExecutions"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/testexecution"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton Icon="category"
                              data-testid="d_testexecutionsworkflow"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["manage.testexecutions"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              ButtonStyle="ButtonStyle.Success"
                              Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testexecutions/manage")'/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>

                <RadzenButton Icon="play_arrow"
                              ButtonStyle="ButtonStyle.Success"
                              data-testid="d_testexecutionsready"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["start.testexecutions"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              Disabled="@_testExecutionsReady.Equals(0)"
                              Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testexecution/active")'></RadzenButton>
            </RadzenStack>
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Vertical">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_testExecutionsCount"/>
                <RadzenBadge IsPill="true" Text=@($"Test Execution Ready {_testExecutionsReady}")/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>


    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenButton
                    MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["Bugs"]))"
                    MouseLeave="@AppTooltipService.HideTooltip"
                    Icon="bug_report"
                    data-testid="d_bugs"
                    ButtonStyle="ButtonStyle.Danger"
                    Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/bugs"))"/>
                <RadzenIcon Icon="arrow_right_alt" Style="font-size: 32px;"/>
                <RadzenButton Icon="category"
                              MouseEnter="@(args => AppTooltipService.ShowTooltip(args, Loc["manage.bugs"]))"
                              MouseLeave="@AppTooltipService.HideTooltip"
                              ButtonStyle="ButtonStyle.Danger"
                              Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/bugs/manage")'></RadzenButton>
            </RadzenStack>
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="@_bugsCount"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <RadzenButton Text="@Loc["Reports"]"
                              data-testid="d_reports"
                              Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/reports"))"/>
            </RadzenStack>
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Reports: 3" class="rz-ms-2"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <RadzenCard Style="max-width: 300px; flex: 1 1 420px; margin: 10px;">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center">
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <RadzenButton Text="@Loc["Milestones"]"
                              data-testid="d_milestones"
                              Click="@(() => NavigationManager.NavigateTo($"project/{ProjectId}/milestones"))"/>
            </RadzenStack>
            <RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal">
                <RadzenBadge BadgeStyle="BadgeStyle.Base" Text="Milestones" class="rz-ms-2"/>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</RadzenStack>



@code {
    [EditorRequired] [Parameter] public int ProjectId { get; set; }

    private string _requirementsCount = string.Empty;
    private string _testCasesCount = string.Empty;
    private string _testPlansCount = string.Empty;
    private string _testExecutionsCount = string.Empty;
    private string _bugsCount = string.Empty;
    private string _requirementsWithSpec = string.Empty;
    private double req;
    private int _testExecutionsReady;
    int _testcaseByTypeAcceptance;
    int _testcaseByTypeRegression;
    int _testcaseByTypeSmoke;

    protected override async Task OnInitializedAsync()
    {
        _requirementsWithSpec = await ReportsModel.RequirementsWithRequirementspecifications(ProjectId);
        _requirementsCount = await ReportsModel.LoadTotalRequirements(ProjectId);
        _testCasesCount = ReportsModel.LoadTotalTestCases(ProjectId);
        _testPlansCount = ReportsModel.LoadTotalTestPlans(ProjectId);
        _testExecutionsCount = ReportsModel.LoadTotalTestExecutions(ProjectId);
        _bugsCount = ReportsModel.LoadTotalBugs(ProjectId);
        _testExecutionsReady = await TestExecutionModel.GetTestExecutionsReadyToExecuteAsync(ProjectId);
        _testcaseByTypeAcceptance = await TestCasesReporting.GetTestCasesByTestType(ProjectId, TestTypes.AcceptanceTest);
        _testcaseByTypeRegression = await TestCasesReporting.GetTestCasesByTestType(ProjectId, TestTypes.RegressionTest);
        _testcaseByTypeSmoke = await TestCasesReporting.GetTestCasesByTestType(ProjectId, TestTypes.SmokeTest);

        req = await ReportsModel.RequirementsCoveredBySpecifications(ProjectId);
    }

}