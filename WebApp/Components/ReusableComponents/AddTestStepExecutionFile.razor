@inject ILogger<AddTestStepExecutionFile> Logger

<RadzenCard Variant="Variant.Outlined">
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload a file</RadzenText>
    <RadzenUpload id="singleFileUpload" @ref="_uploadSingle" ChooseText="Upload" Auto="false"
                  Multiple="false"
                  Change="@(args => OnChange(args, "Uploading file"))" Style="width: 100%"/>

    @if (TestStepExecutionFileModel.FileBytes != null)
    {
        <RadzenStack Orientation="Orientation.Vertical">

            <RadzenImage
                Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(TestStepExecutionFileModel.FileBytes)}")"
                AlternateText="Save"
                         Style="max-width: 150px; max-height: 150px; object-fit: contain; border: 1px solid #ccc; padding: 5px;"/>
        </RadzenStack>
    }

    <RadzenStack Orientation="Orientation.Vertical">
        <RadzenButton Text="Upload"
                      Click="@(() => TestStepExecutionFileModel.UploadFileToDatabase(_selectedFile, TestStepExecutionId, ProjectId))"
                      class="rz-mt-4"/>
    </RadzenStack>
</RadzenCard>


@code {
    RadzenUpload? _uploadSingle;
    IBrowserFile? _selectedFile;

    [EditorRequired] [Parameter] public int TestStepExecutionId { get; set; }
    [EditorRequired] [Parameter] public int ProjectId { get; set; }


    void OnChange(UploadChangeEventArgs args, string name)
    {
        if (args.Files.Count() != 1) return;
        _selectedFile = args.Files.First(); // Get the selected file
        Logger.LogInformation(@"{Name} file selected: {SelectedFileName}, {SelectedFileSize} bytes", name, _selectedFile.Name, _selectedFile.Size);
    }


}