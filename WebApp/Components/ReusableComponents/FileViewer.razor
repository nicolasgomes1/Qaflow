@using System.IO.Compression
@typeparam TItem

<RadzenDataList TItem="TItem" Data="Files">
    <Template Context="file">
        <RadzenRow>
            <RadzenColumn>
                @((string)(typeof(TItem).GetProperty("FileName")?.GetValue(file, null) ?? string.Empty))
            </RadzenColumn>
            <RadzenColumn>
                 @((typeof(TItem).GetProperty("FileContent")?.GetValue(file, null) is byte[] content && content.Length > 0 ? $"{content.Length / 1024.0:F2} KB" : string.Empty))
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton Text="Download"
                              Click="@(async () => await DownloadFile(file))"
                              Size="ButtonSize.Small"/>
            </RadzenColumn>
        </RadzenRow>
    </Template>
</RadzenDataList>

@code {

    /// <summary>
    ///     List of files to display, using a generic type.
    /// </summary>
    [Parameter]
    public List<TItem>? Files { get; set; }

    /// <summary>
    ///     Name of the entity type for additional display or logic.
    /// </summary>
    [Parameter]
    public string EntityName { get; set; } = string.Empty;

    private async Task DownloadFile(TItem file)
    {
        // Accessing properties via reflection to avoid type constraints
        var fileName = typeof(TItem).GetProperty("FileName")?.GetValue(file, null)?.ToString();
        var fileContentCompressed = typeof(TItem).GetProperty("FileContent")?.GetValue(file, null) as byte[];

        if (fileContentCompressed == null || fileContentCompressed.Length == 0)
        {
            return; // Handle the case where FileContent is null or empty
        }

        // Decompress the file content
        byte[] fileContent;
        using (var compressedStream = new MemoryStream(fileContentCompressed))
        using (var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress))
        using (var decompressedStream = new MemoryStream())
        {
            await gzipStream.CopyToAsync(decompressedStream);
            fileContent = decompressedStream.ToArray();
        }

        const string mimeType = "application/octet-stream"; // Default MIME type
        var fileBase64 = Convert.ToBase64String(fileContent);
        var fileDataUrl = $"data:{mimeType};base64,{fileBase64}";

        await JS.InvokeVoidAsync("saveAsFile", fileName, fileDataUrl);
    }


}