@page "/chatgptchat"
@using System.Net.Http.Headers
@using System.Text.Json
@rendermode InteractiveServer
@inject IConfiguration Configuration


<RadzenStack class="rz-p-0 rz-p-md-12">
    <RadzenCard Class="rz-p-4" Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
            <RadzenLabel Text="ChatGPT Chat"/>
        </RadzenStack>
    </RadzenCard>

    <!-- Classic Chat UI -->
    <RadzenCard Class="rz-p-4 rz-mt-4" Variant="Variant.Outlined" Style="height:500px; overflow-y:auto;">
        @foreach (var message in Messages)
        {
            <div class="@($"chat-message {(message.IsUser ? "user" : "assistant")}")">
                <b>@(message.IsUser ? "You:" : "AI:")</b> @message.Text
            </div>
        }
    </RadzenCard>

    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" Class="rz-mt-2">
        <RadzenTextBox @bind-Value="UserInput" Placeholder="Ask me anything..." Style="flex:1"/>
        <RadzenButton Text="Send" Click="SendMessage"/>
    </RadzenStack>
</RadzenStack>

@code {

    private string? _apiKey;

    protected override void OnInitialized()
    {
        // Try multiple possible environment variable names
        _apiKey = Environment.GetEnvironmentVariable("OpenApi_Key_Dev") ??
                  Configuration["Parameters:OpenAIApiKey"] ??
                  throw new InvalidOperationException("OpenAI API key configuration is missing");

        Console.WriteLine($"API Key found: {!string.IsNullOrEmpty(_apiKey)}"); // Debug log
    }


    private string UserInput = string.Empty;

    private List<ChatMessage> Messages = new();

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput)) return;

        // Add user message
        Messages.Add(new ChatMessage(UserInput, true));
        var currentInput = UserInput;
        UserInput = string.Empty;

        StateHasChanged();

        try
        {
            var (response, promptTokens, completionTokens) = await GetCompletion(currentInput);

            if (!string.IsNullOrEmpty(response))
            {
                var fullResponse = $"{response}\n\n---\n_Tokens used â€” Prompt: {promptTokens}, Completion: {completionTokens}_";
                Messages.Add(new ChatMessage(fullResponse, false));
            }
        }
        catch (Exception ex)
        {
            Messages.Add(new ChatMessage($"Error: {ex.Message}", false));
        }

        StateHasChanged();
    }

    private async Task<(string? content, int promptTokens, int completionTokens)> GetCompletion(string prompt)
    {
        using var _httpClient = new HttpClient();
        _httpClient.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _apiKey);

        var data = new
        {
            model = "gpt-4.1-nano",
            input = prompt,
            temperature = 0.7
        };

        var jsonString = JsonSerializer.Serialize(data);
        var content = new StringContent(jsonString, Encoding.UTF8, "application/json");

        var response = await _httpClient.PostAsync("https://api.openai.com/v1/responses", content);
        if (!response.IsSuccessStatusCode)
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            throw new HttpRequestException($"OpenAI API request failed: {errorContent}");
        }

        var responseContent = await response.Content.ReadAsStringAsync();
        using JsonDocument doc = JsonDocument.Parse(responseContent);
        var root = doc.RootElement;

        var promptTokens = root.GetProperty("usage").GetProperty("input_tokens").GetInt32();
        var completionTokens = root.GetProperty("usage").GetProperty("output_tokens").GetInt32();
        var messageContent = root.GetProperty("output")[0].GetProperty("content")[0].GetProperty("text").GetString();

        return (messageContent, promptTokens, completionTokens);
    }

    public class ChatMessage
    {
        public ChatMessage(string text, bool isUser)
        {
            Text = text;
            IsUser = isUser;
        }

        public string Text { get; set; }
        public bool IsUser { get; set; }
    }
}


