@page "/Account/Login"
@using Microsoft.AspNetCore.Authentication


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
<PageTitle>Log in</PageTitle>

<h1 class="d-flex align-items-center justify-content-center">Log in</h1>
<div class="d-flex justify-content-center align-items-center">
    <div class="col-md-4">
        <section class="card p-4 shadow-lg border rounded" style="background-color: #f8f9fa;">
            <StatusMessage Message="@errorMessage"/>

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText data-testid="login_emailform" @bind-Value="Input.Email" class="form-control"
                               autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText data-testid="login_passwordform" type="password" @bind-Value="Input.Password"
                               class="form-control" autocomplete="current-password" aria-required="true"
                               placeholder="password"/>
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input"/>
                    <label class="form-check-label">Remember me</label>
                </div>
                <div class="text-center">
                    <RadzenButton data-testid="login_submitform" ButtonType="ButtonType.Submit" Text="Login"
                                  class="btn btn-primary w-100"/>
                </div>
                <div class="text-center mt-3">
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Register as a new user
                        </a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // Find the user by their email
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            // If user is not found, set an appropriate error message
            errorMessage = "Error: No user found with this email.";
            return;
        }

        // Check if the user's email is confirmed
        if (!await UserManager.IsEmailConfirmedAsync(user))
        {
            errorMessage = "Error: Your email is not confirmed. Please check your inbox for a confirmation link.";
            return;
        }

        // Attempt to sign in the user with the provided password

        if (user.UserName == null) throw new Exception("User name is null");

        var result = await SignInManager.PasswordSignInAsync(user.UserName, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            // Log the error for debugging purposes
            Logger.LogWarning("Invalid login attempt for user {Email}", Input.Email);
            // Detailed error message for UI
            errorMessage = "Error: Invalid login attempt. Please check your username and password and try again.";
        }
    }


    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
        
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}
