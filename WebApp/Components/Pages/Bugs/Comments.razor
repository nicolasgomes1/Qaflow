<RadzenButton Text="Comment" Icon="add" IconColor="red" Shade="Shade.Light" Variant="Variant.Outlined"
              ButtonStyle="ButtonStyle.Primary" Click="@ShowInlineDialog"/>

<RadzenDataList AllowVirtualization="false"
                WrapItems="true" AllowPaging="true"
                Data="@_comments" TItem="BugsComments" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true" @ref="_listgrid">
    <Template Context="comment">
        <RadzenCard Style="width: 100%; border: none; padding: 10px 0; border-bottom: 1px solid #ddd;">
            <RadzenRow>
                <!-- User Information -->
                <RadzenColumn Size="6">
                    <RadzenLabel Text="Created By:" Style="font-weight: bold; margin-right: 5px;"/>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @(comment.CreatedBy)
                    </RadzenText>
                </RadzenColumn>

                <!-- Comment Content -->
                <RadzenColumn Size="6" Style="word-wrap: break-word; white-space: normal;">
                    <RadzenLabel Text="Comment:" Style="font-weight: bold; margin-right: 5px;"/>
                    <RadzenText TextStyle="TextStyle.Body2">
                        @(comment.Comment)
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>



@code {

    [Parameter] public int Id { get; set; }

    RadzenDataList<BugsComments> _listgrid = new();

    IEnumerable<BugsComments> _comments = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
    }

    private async Task LoadComments()
    {
        _comments = await BugsCommentsModel.GetBugsComments(Id);
        StateHasChanged();
    }

    private BugsComments _comment = new();

    private async Task CreateNewComment()
    {
        await BugsCommentsModel.AddBugComment(Id, _comment);
        DialogService.Close();

        // Reload comments list
        await LoadComments();
    }

    async Task ShowInlineDialog()
    {
        _comment = new BugsComments(); // Replace BugsComments with the appropriate model initialization if needed

        await DialogService.OpenAsync("Create Bug Comment", ds =>
            @<RadzenStack Gap="1.5rem" Style="height: 300px;">
                <RadzenTemplateForm Data="_comment" TItem="BugsComments" Submit="@CreateNewComment">
                    <div class="form-group mb-4">
                        <RadzenLabel Text="Comment"/>
                        <RadzenTextArea id="comment"
                                        Style="height: 200px;"
                                       @bind-Value="_comment.Comment"
                                       class="input-style"
                                       Name="comment"/>
                        <RadzenRequiredValidator Component="comment" Text="Comment is required"/>
                    </div>

                    <!-- Submit button inside the form -->
                    <RadzenButton Icon="add" IconColor="red" Text="Create Comment" ButtonStyle="ButtonStyle.Primary"
                                  ButtonType="ButtonType.Submit"
                                  Style="margin-bottom: 10px;"/>
                </RadzenTemplateForm>
            </RadzenStack>, new DialogOptions() { Draggable = true, CloseDialogOnEsc = true, CloseDialogOnOverlayClick = true, Resizable = true });
    }

}
