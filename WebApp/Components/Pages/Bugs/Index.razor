@page "/project/{ProjectId:int}/bugs"
@attribute [Authorize]
@rendermode InteractiveServer

<RadzenDataGrid TItem="Bugs"
                Data="_bugs"
                Density="Density.Compact"
                AllowFiltering="true"
                AllowSorting="true"
                ColumnWidth="auto"
                AllowPaging="true"
                AllowColumnPicking="true"
                PageSize="10"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value="@_selectedBugs"
                @ref="_dataGrid">


    @code{

        private IList<Bugs> _selectedBugs = [];


    }

    <HeaderTemplate>
        <RadzenButton Text="Bug"
                      data-testid="create_bug"
                      Click='() => NavigationManager.NavigateTo($"/project/{ProjectId}/bugs/create")'
                      Size="ButtonSize.Medium"
                      Icon="add"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Create new Bug"))"
                      MouseLeave="@AppTooltipService.HideTooltip"/>
        <RadzenButton Icon="autorenew"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Show All"))"
                      MouseLeave="@AppTooltipService.HideTooltip"
                      Size="ButtonSize.Medium"
                      Click="@(() => DataGridSettingsService.ClearSettingsAsync())"/>
        <DeleteallDataForModel EntityName="@(nameof(Bugs))"
                               EntityList="_bugs"/>
        <RadzenButton Icon="assessment"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Make Assessment"))"
                      MouseLeave="@AppTooltipService.HideTooltip"
                      Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/bugs/manage")'/>
        <ExportGridDataCsv Grid="@_dataGrid"/>
    </HeaderTemplate>


    <Columns>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.Id)" Title="ID"/>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.Name)" Title="Name"/>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.Description)" Title="Description"/>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.Priority)" Title="Priority">
            <Template Context="ctx">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(ctx.Priority)">
                    @ctx.Priority
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.Severity)" Title="Severity">
            <Template Context="ctx">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleSeverity(ctx.Severity)">
                    @ctx.Severity
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Bugs" Property="@nameof(Bugs.BugStatus)" Title="Status">
            <Template Context="ctx">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleBugStatus(ctx.BugStatus)">
                    @ctx.BugStatus
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Bugs.WorkflowStatus)" Title="WorkFlow Status" Width="auto">
            <Template Context="bugs">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleWorkflowStatus(bugs.WorkflowStatus)">
                    @bugs.WorkflowStatus
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Bugs.AssignedTo)" Title="Assigned To" Width="auto">

            <Template Context="bugs">
                @Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(bugs.AssignedTo)).Result
            </Template>
        </RadzenDataGridColumn>

        <!-- Action Buttons column -->
        <IndexActions TItem="Bugs" EntityName="@nameof(Bugs)" ProjectId="ProjectId" OnActionExecuted="@RefreshData"/>
    </Columns>

</RadzenDataGrid>




@code {
    [Parameter] public int ProjectId { get; set; }

    private RadzenDataGrid<Bugs> _dataGrid = new();

    private IEnumerable<Bugs> _bugs = new List<Bugs>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        _bugs = await BugsModel.GetBugsAsync(ProjectId);
        await InvokeAsync(StateHasChanged);
    }


}