@page "/project/{ProjectId:int}/bugs/edit/{Id:int}"
@rendermode InteractiveServer
<h3 class="text-center text-primary mb-4">Edit Bug</h3>

<RadzenTemplateForm Data="@_bugs" Submit="@UpdateBug" TItem="Bugs">
    <ValidationSummary class="alert alert-danger"/>

    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Bug">
                <div class="form-group mb-4">
                    <RadzenLabel Text="Name"/>
                    <RadzenTextBox id="name"
                                   @bind-Value="_bugs.Name"
                                   class="input-style"
                                   Name="name"/>
                    <RadzenRequiredValidator Component="name" Text="Name is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Description"/>
                    <RadzenTextArea id="description"
                                    @bind-Value="_bugs.Description"
                                    class="input-style"
                                    Name="description"/>
                    <RadzenRequiredValidator Component="description" Text="Description is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Priority"/>
                    <RadzenDropDown id="priority"
                                    @bind-Value="_bugs.Priority"
                                    Data="EnumService.GetEnumValues<Priority>()"
                                    class="input-style"
                                    Name="priority"/>
                    <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Severity"/>
                    <RadzenDropDown id="severity"
                                    @bind-Value="_bugs.Severity"
                                    Data="EnumService.GetEnumValues<Severity>()"
                                    class="input-style"
                                    Name="severity"/>
                    <RadzenRequiredValidator Component="severity" Text="Severity is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Bug Status"/>
                    <RadzenDropDown id="bug_status"
                                    @bind-Value="_bugs.BugStatus"
                                    Data="EnumService.GetEnumValues<BugStatus>()"
                                    class="input-style"
                                    Name="bug_status"/>
                    <RadzenRequiredValidator Component="bug_status" Text="Bug Status is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Assigned To"/>
                    <RadzenDropDown id="assignedto"
                                    Data="@_usersList"
                                    @bind-Value="_bugs.AssignedTo"
                                    TextProperty="UserName"
                                    ValueProperty="Id"
                                    class="input-style"
                                    Name="assignedto"/>
                    <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                </div>


            </RadzenTabsItem>
            <RadzenTabsItem Text="Files">
                <FileUploadEdit UploadedFiles="_uploadedFiles"
                                EntityName="@nameof(BugsFiles)"
                                ExistingFiles="@BugsFilesModel.ExistingFiles"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
    <CreateEditActions EntityName="bugs" CreateEdit="Update" ProjectId="ProjectId"/>

</RadzenTemplateForm>



@code {
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public int Id { get; set; }
    private List<ApplicationUser> _usersList = [];

    private readonly List<IBrowserFile>? _uploadedFiles = [];

    int _selectedIndex;
    private Bugs _bugs = new();

    protected override async Task OnInitializedAsync()
    {
        _usersList = await UserService.GetUsersList();

        _bugs = await BugsModel.GetBugByIdAsync(Id);
        await BugsFilesModel.GetBugFilesById(Id);
    }

    private async Task UpdateBug()
    {
        await BugsModel.UpdateBugAsync(_bugs, _uploadedFiles);
        NavigationManager.NavigateTo($"/project/{ProjectId}/bugs");
        await FormNotificationService.NotifySuccess($"Bug updated successfully with id {_bugs.Id}");
    }


}