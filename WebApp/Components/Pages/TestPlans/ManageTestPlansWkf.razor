@page "/project/{ProjectId:int}/testplans/manage"
@rendermode InteractiveServer
@attribute [Authorize]

<AlertTitle TitleText="Managing Test Plans"/>


<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
        <RadzenButton Icon="assignment_ind"
                      data-testid="my_assignment"
                      Text="My Assignments" Click="RefreshAssignedTestPlans"/>
        <RadzenButton Icon="assignment"
                      data-testid="all_assignment"
                      Text="All Test Plans" Click="RefreshAllTestPlans"/>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
        <TestPlansDialogCreate Title="@Loc["create.testplans"]" ProjectId="@ProjectId"
                               OnTestPlanCreated="RefreshAssignedTestPlansFromDialog"/>
        <RadzenButton Icon="list"
                      Click='@(() => NavigationManager.NavigateTo($"/project/{ProjectId}/testplans", true))'/>
    </RadzenStack>

</RadzenStack>



<RadzenDropZoneContainer TItem="TestPlans" Data="testplansData"
                         ItemSelector="@ItemSelector"
                         ItemRender="@OnItemRender"
                         CanDrop="@CanDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
            <RadzenDropZone Value="WorkflowStatus.New"
                            class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="New" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.InReview"
                            class="rz-display-flex rz-flex-column rz-background-color-info-lighter rz-border-info-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="In Review" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Completed"
                            class="rz-display-flex rz-flex-column rz-background-color-success-lighter rz-border-success-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Reopened"
                            class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Reopened" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>
        </RadzenStack>
    </ChildContent>
    <Template>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <strong>@context.Name</strong>
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(context.Priority)">
                    @context.Priority
                </RadzenBadge>
                <RadzenStack Orientation="Orientation.Vertical">
                    <p>
                        @Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(context.AssignedTo)).Result
                    </p>
                </RadzenStack>

            </RadzenStack>
        </RadzenStack>
    </Template>
</RadzenDropZoneContainer>

@code {
    [Parameter] public int ProjectId { get; set; }


    private async Task RefreshAssignedTestPlansFromDialog()
    {
        await using var db = await DbContext.CreateDbContextAsync();
        testplansData = await db.TestPlans.Where(rp => rp.ProjectsId == ProjectId).ToListAsync();
    }


    private IList<TestPlans>? testplansData = [];

    Func<TestPlans, RadzenDropZone<TestPlans>, bool> ItemSelector = (item, zone) => item.WorkflowStatus == (WorkflowStatus)zone.Value;

    Func<RadzenDropZoneItemEventArgs<TestPlans>, bool> CanDrop = request =>
    {
        return request.FromZone == request.ToZone ||
               Math.Abs((int)request.Item.WorkflowStatus - (int)request.ToZone.Value) == 1;
    };

    void OnItemRender(RadzenDropZoneItemRenderEventArgs<TestPlans> args)
    {
        args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light";

        if (args.Item.WorkflowStatus == WorkflowStatus.New)
        {
            args.Attributes["class"] += " rz-border-danger";
        }
    }

    async void OnDrop(RadzenDropZoneItemEventArgs<TestPlans> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item.WorkflowStatus = (WorkflowStatus)args.ToZone.Value;

            args.Item.ArchivedStatus = args.Item.WorkflowStatus switch
            {
                WorkflowStatus.Completed => ArchivedStatus.Archived,
                WorkflowStatus.InReview => ArchivedStatus.Active,
                WorkflowStatus.Reopened => ArchivedStatus.Active,
                WorkflowStatus.New => ArchivedStatus.Active,
                _ => args.Item.ArchivedStatus
            };

            await using var db = await DbContext.CreateDbContextAsync();
            args.Item.ModifiedBy = UserService.GetCurrentUserNameAsync().Result;
            db.TestPlans.Update(args.Item);
            await db.SaveChangesAsync();
        }

        if (args.ToItem == null || args.ToItem == args.Item) return;
        testplansData?.Remove(args.Item);
        testplansData?.Insert(testplansData.IndexOf(args.ToItem), args.Item);
    }

    protected override async Task OnInitializedAsync()
    {
        await using var db = await DbContext.CreateDbContextAsync();
        testplansData = await db.TestPlans.Where(rp => rp.ProjectsId == ProjectId).ToListAsync();
    }

    private async Task<List<TestPlans>> GetTestPlansAssignedToAll()
    {
        await using var db = await DbContext.CreateDbContextAsync();
        return await db.TestPlans.Where(rp => rp.ProjectsId == ProjectId).ToListAsync();
    }


    private async Task<List<TestPlans>> GetTestPlansAssignedToCurrentUser()
    {
        await using var db = await DbContext.CreateDbContextAsync();
        return await db.TestPlans.Where(rp => rp.ProjectsId == ProjectId && rp.AssignedTo == UserService.GetCurrentUserInfoAsync().Result.UserId).ToListAsync();
    }

    private async Task RefreshAssignedTestPlans()
    {
        testplansData = await GetTestPlansAssignedToCurrentUser();
        StateHasChanged();
    }

    private async Task RefreshAllTestPlans()
    {
        testplansData = await GetTestPlansAssignedToAll();
        StateHasChanged();
    }


}