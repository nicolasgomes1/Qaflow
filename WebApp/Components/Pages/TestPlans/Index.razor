@page "/project/{ProjectId:int}/testplans"
@rendermode InteractiveServer
@attribute [Authorize]

@if (_isLoading)
{
    <ProgressBar/>
}
else
{
    <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced"
                    AllowSorting="true"
                    PageSize="@_pageSizeFilter"
                    AllowPaging="true"
                    AllowColumnPicking="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@_testplans"
                    ColumnWidth="300px"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value="@_selectedTestPlans"
                    @bind-Settings="@DataGridSettingsService.Settings"
                    @ref="_dataGrid">

        <HeaderTemplate>
            <RadzenButton Text="Test Plan"
                          data-testid="create-testplan"
                          Click='() => NavigationManager.NavigateTo($"/project/{ProjectId}/testplans/create", true)'
                          Size="ButtonSize.Medium"
                          Icon="add"/>
            <RadzenButton Icon="autorenew"
                          MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Show All"))"
                          MouseLeave="@AppTooltipService.HideTooltip"
                          Size="ButtonSize.Medium" Click=@(() => DataGridSettingsService.ClearSettingsAsync())/>

            <DeleteallDataForModel EntityName="@(nameof(TestPlans))" EntityList="_testplans"/>
            <ExportGridDataCsv Grid="_dataGrid"/>
            <RadzenButton Icon="assessment"
                          MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Make Assessment"))"
                          MouseLeave="@AppTooltipService.HideTooltip"
                          Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testplans/manage")'/>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(TestPlans.Id)" Filterable="false" Title="ID" Frozen="true"
                                  Width="80px" TextAlign="TextAlign.Center"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.Name)" Title="Name" Frozen="true" Width="auto"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.Description)" Title="Description" Width="auto"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.Priority)" Title="Priority" Width="auto">
                <Template Context="ctx">
                    <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(ctx.Priority)">
                        @ctx.Priority
                    </RadzenBadge>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(TestPlans.CreatedAt)" Title="Created At" Width="auto"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.ModifiedAt)" Title="Modified At" Width="auto"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.CreatedBy)" Title="Created By" Width="auto"/>
            <RadzenDataGridColumn Property="@nameof(TestPlans.ModifiedBy)" Title="Modified By" Width="auto"/>
            <RadzenDataGridColumn Title="Test Cases" Width="auto">
                <Template Context="testplan">
                    @if (testplan.LinkedTestCases.Any())
                    {
                        var testcasesLinks = testplan.LinkedTestCases
                            .Select(testcase => $"<a href=\"project/{testplan.ProjectsId}/testcases/view/{testcase.Id}\">{testcase.Name}</a>")
                            .ToList();

                        @((MarkupString)string.Join(", ", testcasesLinks))
                    }
                    else
                    {
                        <span style="color: red;">No Test cases</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(TestPlans.WorkflowStatus)" Title="Status" Width="auto">
                <Template Context="testplan">
                    <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleWorkflowStatus(testplan.WorkflowStatus)">
                        @testplan.WorkflowStatus
                    </RadzenBadge>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(TestPlans.AssignedTo)" Title="Assigned To" Width="auto">
                <Template Context="testplan">
                    @Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(testplan.AssignedTo)).Result
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(TestPlans.ArchivedStatus)" Title="Is Archived" Width="auto">
                <Template Context="ctx">
                    <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleArchivedStatus(ctx.ArchivedStatus)">
                        @ctx.ArchivedStatus
                    </RadzenBadge>
                </Template>
            </RadzenDataGridColumn>
            <IndexActions TItem="TestPlans" EntityName="TestPlans" ProjectId="ProjectId"/>

        </Columns>

        <FooterTemplate>
            <RadzenGridRow>
                <PageSizeSelector PageSizeChanged="OnPageSizeChanged"/>
            </RadzenGridRow>
        </FooterTemplate>
    </RadzenDataGrid>
}


@code {
    [Parameter] public int ProjectId { get; set; }

    private IEnumerable<TestPlans>? _testplans;

    private IList<TestPlans> _selectedTestPlans = [];

    private readonly string _gridId = "testplans"; // Unique identifier for this grid

    private bool _isLoading = true;
    int _pageSizeFilter = 5;

    private RadzenDataGrid<TestPlans> _dataGrid = new();

    private async Task OnPageSizeChanged(int newSize)
    {
        _pageSizeFilter = newSize;
        await Task.Delay(1);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        DataGridSettingsService.SetCurrentGridId(_gridId);

        (_testplans, _selectedTestPlans) = await TestPlansModel.DisplayTestPlansIndexPage1(ProjectId);
        //  await TestPlansModel.DisplayTestPlansIndexPage();
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataGridSettingsService.LoadSettingsAsync();
            _isLoading = false; // Stop showing the loading spinner after settings are applied
            StateHasChanged(); // Re-render with updated settings
        }
    }

}