@page "/project/{ProjectId:int}/testplans/create"
@rendermode InteractiveServer
@attribute [Authorize]

<RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Warning"
             Size="AlertSize.Small" Variant="Variant.Filled"
             Shade="Shade.Default" Icon="add"
             Text="@(Req)"/>

@code{
    private string Req => $"Creating new Test Plan";
}

<RadzenTemplateForm Data="@_testPlans" TItem="TestPlans" Submit="CreateNewTestPlan">
    <ValidationSummary class="alert alert-danger"/>

    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="_selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Test Plans">

                <RadzenFieldset Text="Test Plans Details">


                    <div class="form-group mb-4">
                        <RadzenLabel Text="Name"/>
                        <RadzenTextBox id="name"
                                       @bind-Value="_testPlans.Name"
                                       class="input-style"
                                       Name="name"/>
                        <RadzenRequiredValidator Component="name" Text="Name is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Description"/>
                        <RadzenTextBox id="description"
                                       @bind-Value="_testPlans.Description"
                                       class="input-style"
                                       Name="description"/>
                        <RadzenRequiredValidator Component="description" Text="Description is recommended"/>
                    </div>


                    <div class="form-group mb-4">
                        <RadzenLabel Text="Priority"/>
                        <RadzenDropDown id="priority"
                                        @bind-Value="_testPlans.Priority"
                                        Data="EnumService.GetEnumValues<Priority>()"
                                        class="input-style"
                                        Name="priority"/>
                        <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                    </div>


                    <div class="form-group mb-4">
                        <RadzenLabel Text="Test Cases"/>
                        <RadzenDropDown id="testcases"
                                        Data="@_testCaseslist"
                                        @bind-Value="TestPlansModel.SelectedTestCasesIds"
                                        TextProperty="Name"
                                        ValueProperty="Id"
                                        Multiple="true"
                                        class="input-style"
                                        Name="Test Cases"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Status"/>
                        <RadzenDropDown id="status"
                                        @bind-Value="_testPlans.WorkflowStatus"
                                        Data="EnumService.GetEnumValues<WorkflowStatus>()"
                                        class="input-style"
                                        Name="status"/>
                        <RadzenRequiredValidator Component="status" Text="Workflow Status is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Assigned To"/>
                        <RadzenDropDown id="assignedto"
                                        Data="@_usersList"
                                        @bind-Value="_testPlans.AssignedTo"
                                        TextProperty="UserName"
                                        ValueProperty="Id"
                                        class="input-style"
                                        Name="assignedto"/>
                        <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                    </div>
                </RadzenFieldset>

            </RadzenTabsItem>
            <RadzenTabsItem Text="Files">
                <FileUpload UploadedFiles="_uploadedFiles"/>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>


    <CreateEditActions EntityName="testplans" CreateEdit="Create"/>
</RadzenTemplateForm>

@code {

    [Parameter] public int ProjectId { get; set; }
    private List<ApplicationUser> _usersList = [];

    int _selectedIndex;
    private readonly TestPlans _testPlans = new();
    private readonly List<IBrowserFile>? _uploadedFiles = [];

    private List<TestCases> _testCaseslist = [];

    protected override async Task OnInitializedAsync()
    {
        _usersList = await UserService.GetUsersList();

        // await TestCasesModel.GetTestCasesWithWorkflowStatus(WorkflowStatus.Completed);
        _testCaseslist = await TestCasesModel.GetTestCasesWithWorkflowStatus(ProjectId);
    }

    private async Task CreateNewTestPlan()
    {
        //await TestPlansModel.CreateTestPlan1(_testPlans, _uploadedFiles);
        await TestPlansModel.CreateTestPlanAsync(_testPlans, _uploadedFiles, ProjectId);
        NavigationManager.NavigateTo($"project/{ProjectId}/testplans");
        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Test Plan with Id {_testPlans.Id} Created Successfully");
    }

}