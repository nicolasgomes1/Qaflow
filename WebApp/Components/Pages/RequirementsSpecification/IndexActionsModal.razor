@attribute [Authorize]
@typeparam TItem
@inject TooltipService TooltipService

<div style="display: flex; justify-content: center; align-items: center; gap: 5px; flex-wrap: nowrap;">
    <RadzenDataGridColumn TItem="TItem" Sortable="false" Filterable="false" Resizable="false" Width="100px"
                          Reorderable="false" Title="Actions" Pickable="false">
        <Template Context="item">
            <div style="display: flex; gap: 5px;">

                @if (EntityName == nameof(RequirementsSpecification))
                {
                    <RequirementsSpecificationDialogView Id="GetId(item)"/>
                    <RequirementsSpecificationDialogEdit Id="GetId(item)"
                                                         OnRequirementSpecificationUpdated="OnRequirementSpecificationUpdated"/>
                    <RequirementsSpecificationDialogDelete Id="GetId(item)"
                                                           OnRequirementDeleted="OnRequirementSpecificationUpdated"/>
                }
                

            </div>
        </Template>
    </RadzenDataGridColumn>
</div>



@code {
    [EditorRequired] [Parameter] public required string EntityName { get; set; }
    [EditorRequired] [Parameter] public EventCallback OnRequirementSpecificationUpdated { get; set; }


    private int GetId(TItem item)
    {
        var prop = typeof(TItem).GetProperty("Id");
        if (prop is null) throw new InvalidOperationException("The item does not have an 'Id' property.");
        return (int)(prop.GetValue(item) ?? 0);
    }


    private bool IsArchived(TItem item)
    {
        var prop = typeof(TItem).GetProperty("ArchivedStatus");
        if (prop is null) throw new InvalidOperationException("The item does not have an 'ArchivedStatus' property.");
        return (ArchivedStatus)(prop.GetValue(item) ?? 0) == ArchivedStatus.Archived;
    }

}