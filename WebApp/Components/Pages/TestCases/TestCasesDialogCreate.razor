@inject DialogService DialogService


<RadzenButton Text="@Title" Icon="add" IconColor="red" Shade="Shade.Light" Variant="Variant.Outlined"
              Disabled="@IsDisabled"
              ButtonStyle="ButtonStyle.Primary" Click="@ShowInlineDialog"/>

@code {
    private TestCases _testCases = new();
    private readonly List<IBrowserFile>? _uploadedFiles = [];

    [Parameter] public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Default value is false
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter] public int ProjectId { get; set; }


    private async Task CreateNewTestCase()
    {
        _testCases.EstimatedTime = TimeSpan.FromMinutes(int.TryParse(_estimatedTimeInput, out var minutes) ? minutes : 0);

        // CreateBug should handle adding the bug and return a result
        var result = await TestCasesModel.CreateTestCases(_testCases, _uploadedFiles);

        DialogService.Close(result);
        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Test Case created successfully with id {_testCases.Id}");
    }

    private string _estimatedTimeInput = string.Empty;

    async Task ShowInlineDialog()
    {
        _testCases = new TestCases();
        const string createModel = "Create Test Case";
        var result = await DialogService.OpenAsync(createModel, ds =>
            @<RadzenStack Gap="1.5rem" Style="height: 600px;">
                <RadzenTemplateForm Data="_testCases" TItem="TestCases" Submit="@CreateNewTestCase">
                    <ValidationSummary class="alert alert-danger"/>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Name"/>
                        <RadzenTextBox id="name"
                                       @bind-Value="_testCases.Name"
                                       class="input-style"
                                       Name="name"/>
                        <RadzenRequiredValidator Component="name" Text="Name is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Description"/>
                        <RadzenTextArea id="description"
                                        @bind-Value="_testCases.Description"
                                        class="input-style"
                                        Name="description"/>
                        <RadzenRequiredValidator Component="description" Text="Description is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Estimated Time (in minutes)"/>
                        <RadzenTextBox id="estimatedTime"
                                       @bind-Value="_estimatedTimeInput"
                                       Placeholder="Enter time in minutes"
                                       class="input-style"
                                       Name="estimatedTime"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Priority"/>
                        <RadzenDropDown id="priority" @bind-Value="_testCases.Priority"
                                        Data="EnumService.GetEnumValues<Priority>()"
                                        class="input-style"
                                        Name="priority"/>
                        <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Test Type"/>
                        <RadzenDropDown id="test_type" @bind-Value="_testCases.TestType"
                                        Data="EnumService.GetEnumValues<TestTypes>()"
                                        class="input-style"
                                        Name="test_type"/>
                        <RadzenRequiredValidator Component="test_type" Text="Test Type is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Test Scope"/>
                        <RadzenDropDown id="test_scope" @bind-Value="_testCases.TestScope"
                                        Data="EnumService.GetEnumValues<TestScope>()"
                                        class="input-style"
                                        Name="test_scope"/>
                        <RadzenRequiredValidator Component="test_scope" Text="Test Scope is required"/>
                    </div>
                    
                    <FileUpload UploadedFiles="_uploadedFiles"/>


                    <!-- Submit button inside the form -->
                    <RadzenButton Text="@createModel" ButtonStyle="ButtonStyle.Secondary"
                                  ButtonType="ButtonType.Submit"
                                  Style="margin-bottom: 10px;"/>
                </RadzenTemplateForm>
            </RadzenStack>);
    }

}