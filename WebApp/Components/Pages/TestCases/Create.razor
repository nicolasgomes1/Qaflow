@page "/project/{ProjectId:int}/testcases/create"
@rendermode InteractiveServer
@attribute [Authorize]

<AlertTitle TitleText="Creating new Test Case"/>


<RadzenTemplateForm Data="@_testCases" TItem="TestCases" Submit="CreateTestCase">
    <ValidationSummary class="alert alert-danger"/>

    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Test Case">
                <RadzenFieldset Text="Test Cases Details">
                    <div class="container-fluid p-0">

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Name"/>
                            <RadzenTextBox id="name"
                                           data-testid="testcase_name"
                                           @bind-Value="_testCases.Name"
                                           Name="name"/>
                            <RadzenRequiredValidator Component="name" Text="Name is required"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Description"/>
                            <RadzenTextArea id="description"
                                            data-testid="testcase_description"
                                            @bind-Value="_testCases.Description"
                                            Name="description"/>
                            <RadzenRequiredValidator Component="description" Text="Description is recommended"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Estimated Time (in minutes)"/>
                            <RadzenTextBox id="estimatedTime"
                                           @bind-Value="TestCasesModel.EstimatedTimeInput"
                                           Placeholder="Enter time in minutes"
                                           Name="estimatedTime"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Priority"/>
                            <RadzenDropDown id="priority" @bind-Value="_testCases.Priority"
                                            Data="EnumService.GetEnumValues<Priority>()"
                                            data-testid="testcase_priority"
                                            Name="priority"/>
                            <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Test Type"/>
                            <RadzenDropDown id="test_type" @bind-Value="_testCases.TestType"
                                            Data="EnumService.GetEnumValues<TestTypes>()"
                                            Name="test_type"/>
                            <RadzenRequiredValidator Component="test_type" Text="Test Type is required"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Test Scope"/>
                            <RadzenDropDown id="test_scope" @bind-Value="_testCases.TestScope"
                                            Data="EnumService.GetEnumValues<TestScope>()"
                                            Name="test_scope"/>
                            <RadzenRequiredValidator Component="test_scope" Text="Test Scope is required"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Requirements"/>
                            <RadzenDropDown id="requirements"
                                            Data="@_requirementsList"
                                            @bind-Value="TestCasesModel.SelectedRequirementIds"
                                            Placeholder="only completed requirements will be displayed"
                                            TextProperty="Name"
                                            ValueProperty="Id"
                                            Multiple="true"
                                            AllowFiltering="true"
                                            AllowVirtualization="true"
                                            Name="requirements"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Status"/>
                            <RadzenDropDown id="status"
                                            @bind-Value="_testCases.WorkflowStatus"
                                            data-testid="testcase_status"
                                            Data="EnumService.GetEnumValues<WorkflowStatus>()"
                                            Name="status"/>
                            <RadzenRequiredValidator Component="status" Text="Workflow Status is required"/>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Assigned To"/>
                            <RadzenDropDown id="assignedto"
                                            Data="@_usersList"
                                            data-testid="testcase_assignedto"
                                            @bind-Value="_testCases.AssignedTo"
                                            TextProperty="UserName"
                                            ValueProperty="Id"
                                            Name="assignedto"/>
                            <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                        </div>
                    </div>

                </RadzenFieldset>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Test Steps">
                <!-- Test Step Form -->
                <CreateEditTestSteps TestSteps="@TestCasesModel.TestStepsList" RefreshPage="StateHasChanged"/>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Files" data-testid="testcase_files">
                <FileUpload UploadedFiles="_uploadedFiles"/>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Integration">
                <RadzenLabel Text="External Jira Id"/>
                <RadzenDropDown id="integration"
                                AllowFiltering="true"
                                AllowVirtualization="true"
                                Placeholder="Select Jira Ticket"
                                Data="@TestCasesModel.JiraIntegrations"
                                @bind-Value="TestCasesModel.SelectedJiraTicketIds"
                                TextProperty="key"
                                ValueProperty="Id"
                                Multiple="true"
                                class="input-style"
                                Name="integration"/>

            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>


    <CreateEditActions EntityName="testcases" CreateEdit="Create"/>

</RadzenTemplateForm>


@code {
    [Parameter] public int ProjectId { get; set; }
    private List<ApplicationUser> _usersList = [];

    private Integrations? _integrations = new();
    
    int _selectedIndex;
    private readonly List<IBrowserFile>? _uploadedFiles = [];

    private readonly TestCases _testCases = new();

    private List<Requirements> _requirementsList = [];


    protected override async Task OnInitializedAsync()
    {
        _usersList = await UserService.GetUsersList();
        _integrations = await IntegrationsModel.GetIntegrationByProjectId(ProjectId);

        _requirementsList = await RequirementsModel.GetRequirementsWithWorkflowStatus(WorkflowStatus.Completed, ProjectId);
        // TestCasesModel.JiraIntegrations = await JiraService.GetProjectIssuesAsync("MFLP");
    var hasIntegrations = await IntegrationsModel.HasIntegrations(ProjectId);

    if (hasIntegrations)
    {
    TestCasesModel.JiraIntegrations = await JiraServiceFromDb.GetProjectIssuesFromDbAsync(_integrations.UniqueKey, _integrations.JiraProjectKey);
    }
    }

    private async Task CreateTestCase()
    {
        await TestCasesModel.AddTestCases(_testCases, _uploadedFiles, ProjectId);
        NavigationManager.NavigateTo($"project/{ProjectId}/testcases");
        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Test Case with Id {_testCases.Id} Created Successfully");
    }

}