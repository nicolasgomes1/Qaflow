@page "/project/{ProjectId:int}/milestones"
@rendermode InteractiveServer
@attribute [Authorize]

<MilestoneGauge CurrentValue="@_mydouble" ExpectedValue="69" Title="Test Execution Pass Rate"></MilestoneGauge>

<RadzenStack Orientation="Orientation.Horizontal">
    <MilestoneGauge CurrentValue="@_currentValueLow" ExpectedValue="30" Title="@MilestoneTitleL"></MilestoneGauge>
    <MilestoneGauge CurrentValue="@_currentValueMedium" ExpectedValue="50" Title="@MilestoneTitleM"></MilestoneGauge>
    <MilestoneGauge CurrentValue="@_currentValueHigh" ExpectedValue="70" Title="@MilestoneTitleH"></MilestoneGauge>
    <MilestoneGauge CurrentValue="_currentValueCritical" ExpectedValue="90" Title="@MilestoneTitleC"></MilestoneGauge>
</RadzenStack>



@code
{
    [Parameter] public int ProjectId { get; set; }

    private double _currentValueLow;
    private double _currentValueMedium;
    private double _currentValueHigh;
    private double _currentValueCritical;

    private string MilestoneTitleL => $"Test Execution With {EnumService.GetSingleEnum(Priority.Low).ToString()} Priority";
    private string MilestoneTitleM => $"Test Execution With {EnumService.GetSingleEnum(Priority.Medium).ToString()} Priority";
    private string MilestoneTitleH => $"Test Execution With {EnumService.GetSingleEnum(Priority.High).ToString()} Priority";
    private string MilestoneTitleC => $"Test Execution With {EnumService.GetSingleEnum(Priority.Critical).ToString()} Priority";

    private double _mydouble;

    protected override async Task OnInitializedAsync()
    {
        _mydouble = await ReportsModel.GetTestExecutionPassRateAsync(ProjectId);
        _currentValueLow = await TestExecutionModel.GetRationofTestExecutionsByPriorityAsync(Priority.Low, ProjectId);
        _currentValueMedium = await TestExecutionModel.GetRationofTestExecutionsByPriorityAsync(Priority.Medium, ProjectId);
        _currentValueHigh = await TestExecutionModel.GetRationofTestExecutionsByPriorityAsync(Priority.High, ProjectId);
        _currentValueCritical = await TestExecutionModel.GetRationofTestExecutionsByPriorityAsync(Priority.Critical, ProjectId);
    }


}
