@page "/project/{ProjectId:int}/requirements/manage"
@attribute [Authorize]

@rendermode InteractiveServer

<AlertTitle TitleText="Managing Requirements"/>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
        <RadzenButton Icon="assignment_ind" data-testid="my_assignment" Text="My Assignments"
                      Click="RefreshAssignedRequirements"/>
        <RadzenButton Icon="assignment" data-testid="all_assignment" Text="All Requirements"
                      Click="RefreshAllRequirements"/>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
        <RequirementsDialogCreate Title="" ProjectId="@ProjectId"
                                  OnRequirementCreated="@RefreshAllRequirements"/>
        <RadzenButton Icon="list"
                      ButtonStyle="ButtonStyle.Warning"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Requirements List"))"
                      MouseLeave="@AppTooltipService.HideTooltip"
                      Click='@(() => NavigationManager.NavigateTo($"/project/{ProjectId}/requirements", true))'/>
    </RadzenStack>
</RadzenStack>




<RadzenDropZoneContainer TItem="Requirements" Data="_requirementsData"
                         ItemSelector="@_itemSelector"
                         ItemRender="@OnItemRender"
                         CanDrop="@_canDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
            <RadzenDropZone Value="WorkflowStatus.New"
                            class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="New" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.InReview"
                            class="rz-display-flex rz-flex-column rz-background-color-info-lighter rz-border-info-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="In Review" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Completed"
                            class="rz-display-flex rz-flex-column rz-background-color-success-lighter rz-border-success-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Reopened"
                            class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Reopened" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>
        </RadzenStack>
    </ChildContent>
    <Template>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" @ondblclick="ViewCard">
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <strong>@context.Name</strong>
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(context.Priority)">
                    @context.Priority
                </RadzenBadge>
                <RadzenStack Orientation="Orientation.Vertical">
                    <p>@Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(context.AssignedTo)).Result</p>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    </Template>
</RadzenDropZoneContainer>

@code {
    [Parameter] public int ProjectId { get; set; }


    private IList<Requirements>? _requirementsData = [];

    readonly Func<Requirements, RadzenDropZone<Requirements>, bool> _itemSelector = (item, zone) => item.WorkflowStatus == (WorkflowStatus)zone.Value;

    readonly Func<RadzenDropZoneItemEventArgs<Requirements>, bool> _canDrop = request =>
    {
        return request.FromZone == request.ToZone ||
               Math.Abs((int)request.Item.WorkflowStatus - (int)request.ToZone.Value) == 1;
    };

    void OnItemRender(RadzenDropZoneItemRenderEventArgs<Requirements> args)
    {
        args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light";

        switch (args.Item.WorkflowStatus)
        {
            case WorkflowStatus.New:
                args.Attributes["class"] += " rz-border-danger";
                break;
            case WorkflowStatus.InReview:
                args.Attributes["class"] += " rz-border-warning";
                break;
            case WorkflowStatus.Completed:
                args.Attributes["class"] += " rz-border-success";
                break;
            case WorkflowStatus.Reopened:
                args.Attributes["class"] += " rz-border-primary";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    async void OnDrop(RadzenDropZoneItemEventArgs<Requirements> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item.WorkflowStatus = (WorkflowStatus)args.ToZone.Value;

            args.Item.ArchivedStatus = args.Item.WorkflowStatus switch
            {
                WorkflowStatus.Completed => ArchivedStatus.Archived,
                WorkflowStatus.InReview => ArchivedStatus.Active,
                WorkflowStatus.Reopened => ArchivedStatus.Active,
                WorkflowStatus.New => ArchivedStatus.Active,
                _ => args.Item.ArchivedStatus
            };

            await using var db = await DbContext.CreateDbContextAsync();
            args.Item.ModifiedBy = UserService.GetCurrentUserNameAsync().Result;
            db.Requirements.Update(args.Item);
            await db.SaveChangesAsync();
        }

        if (args.ToItem == null || args.ToItem == args.Item) return;
        _requirementsData?.Remove(args.Item);
        _requirementsData?.Insert(_requirementsData.IndexOf(args.ToItem), args.Item);
    }

    protected override async Task OnInitializedAsync()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToAll(ProjectId);
    }

    private async Task RefreshAssignedRequirementsFromDialog()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToCurrentUser(ProjectId);
        StateHasChanged();
    }

//    private async Task<List<Requirements>> GetRequirementsAssignedToAll()
//    {
//        await using var db = await DbContext.CreateDbContextAsync();
//        return await db.Requirements.Where(rp => rp.ProjectsId == ProjectId).ToListAsync();
//    }


    //   private async Task<List<Requirements>> GetRequirementsAssignedToCurrentUser()
    //   {
    //       await using var db = await DbContext.CreateDbContextAsync();
    //       return await db.Requirements.Where(rp => rp.ProjectsId == ProjectId && rp.AssignedTo == UserService.GetCurrentUserInfoAsync().Result.UserId).ToListAsync();
    //   }

    private async Task RefreshAssignedRequirements()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToCurrentUser(ProjectId);
        StateHasChanged();
    }

    private async Task RefreshAllRequirements()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToAll(ProjectId);
        StateHasChanged();
    }


    private void ViewCard()
    {
        Console.WriteLine($"Clicked on {_itemSelector}");
    }

}
