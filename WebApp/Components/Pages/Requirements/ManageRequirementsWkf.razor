@page "/project/{ProjectId:int}/requirements/manage"
@attribute [Authorize]
@rendermode InteractiveServer
@inject ILogger<ManageRequirementsWkf> Logger
<AlertTitle TitleText="Managing Requirements"/>

<!-- Add the component with a reference -->
<RequirementsDialogView @ref="_requirementsDialog" Id="0"/>
<RequirementsDialogEdit @ref="_requirementsDialogEdit" ProjectId="ProjectId" Id="0"
                        OnRequirementUpdated="RefreshAllRequirements"/>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
        <RadzenButton Icon="assignment_ind" data-testid="my_assignment" Text="My Assignments"
                      Click="RefreshAssignedRequirements"/>
        <RadzenButton Icon="assignment" data-testid="all_assignment" Text="All Requirements"
                      Click="RefreshAllRequirements"/>
        <RadzenTextBox Placeholder="Search requirements..."
                       Change=@(args => SearchRequirements(args))
                       style="width: 300px"/>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
        <RequirementsDialogCreate Title="" ProjectId="@ProjectId"
                                  OnRequirementCreated="@RefreshAllRequirements"/>
        <RadzenButton Icon="list"
                      ButtonStyle="ButtonStyle.Warning"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Requirements List"))"
                      MouseLeave="@AppTooltipService.HideTooltip"
                      Click='@(() => NavigationManager.NavigateTo($"/project/{ProjectId}/requirements", true))'/>
    </RadzenStack>
</RadzenStack>


<RadzenDropZoneContainer TItem="Requirements" Data="_filteredRequirementsData"
                         ItemSelector="@_itemSelector"
                         ItemRender="WkfManagementCardColor.OnItemRender<Requirements>"
                         CanDrop="@_canDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
            <RadzenDropZone Value="WorkflowStatus.New"
                            class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="New" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.InReview"
                            class="rz-display-flex rz-flex-column rz-background-color-info-lighter rz-border-info-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="In Review" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Completed"
                            class="rz-display-flex rz-flex-column rz-background-color-success-lighter rz-border-success-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Reopened"
                            class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Reopened" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>
        </RadzenStack>
    </ChildContent>
    <Template>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem"
                     ContextMenu="args => OpenContextMenuForCard(args,context.Id)">

            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <strong>@context.Name</strong>
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(context.Priority)">
                    @context.Priority
                </RadzenBadge>
                <RadzenStack Orientation="Orientation.Vertical">
                    <p>@Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(context.AssignedTo)).Result</p>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    </Template>
</RadzenDropZoneContainer>

@code {
    [Parameter] public int ProjectId { get; set; }
    private RequirementsDialogView _requirementsDialog = null!;
    private RequirementsDialogEdit _requirementsDialogEdit = null!;

    private IList<Requirements>? _requirementsData = [];
    private IList<Requirements>? _filteredRequirementsData = [];
    private string _searchTerm = "";

    readonly Func<Requirements, RadzenDropZone<Requirements>, bool> _itemSelector = (item, zone) => item.WorkflowStatus == (WorkflowStatus)zone.Value;

    readonly Func<RadzenDropZoneItemEventArgs<Requirements>, bool> _canDrop = request =>
    {
        return request.FromZone == request.ToZone ||
               Math.Abs((int)request.Item.WorkflowStatus - (int)request.ToZone.Value) == 1;
    };


    async void OnDrop(RadzenDropZoneItemEventArgs<Requirements> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item.WorkflowStatus = (WorkflowStatus)args.ToZone.Value;

            args.Item.ArchivedStatus = args.Item.WorkflowStatus switch
            {
                WorkflowStatus.Completed => ArchivedStatus.Archived,
                WorkflowStatus.InReview => ArchivedStatus.Active,
                WorkflowStatus.Reopened => ArchivedStatus.Active,
                WorkflowStatus.New => ArchivedStatus.Active,
                _ => args.Item.ArchivedStatus
            };

            await using var db = await DbContext.CreateDbContextAsync();
            args.Item.ModifiedBy = UserService.GetCurrentUserNameAsync().Result;
            db.Requirements.Update(args.Item);
            await db.SaveChangesAsync();
        }

        if (args.ToItem == null || args.ToItem == args.Item) return;
        _filteredRequirementsData?.Remove(args.Item);
        _filteredRequirementsData?.Insert(_filteredRequirementsData.IndexOf(args.ToItem), args.Item);
    }

    protected override async Task OnInitializedAsync()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToAll(ProjectId);
        _filteredRequirementsData = _requirementsData;
    }

    private void SearchRequirements(string searchTerm)
    {
        _searchTerm = searchTerm?.ToLower() ?? "";

        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredRequirementsData = _requirementsData;
        }
        else
        {
            _filteredRequirementsData = _requirementsData?
                .Where(r => r.Name != null && r.Name.ToLower().Contains(_searchTerm))
                .ToList();
        }

        StateHasChanged();
    }

    private async Task RefreshAssignedRequirements()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToCurrentUser(ProjectId);
        _filteredRequirementsData = _requirementsData;
        StateHasChanged();
    }

    private async Task RefreshAllRequirements()
    {
        _requirementsData = await RequirementsModel.GetRequirementsAssignedToAll(ProjectId);
        _filteredRequirementsData = _requirementsData;
        StateHasChanged();
    }

    private async Task ViewCard(int id)
    {
        Logger.LogInformation($"viewing {id}");

        _requirementsDialog.Id = id;
        await _requirementsDialog.ViewInlineDialog();
        ContextMenuService.Close();
    }

    private async Task EditCard(int id)
    {
        Logger.LogInformation($"editing {id}");
        _requirementsDialogEdit.Id = id;
        await _requirementsDialogEdit.ShowInlineDialog();
        ContextMenuService.Close();
    }

    async Task DeleteCard(Requirements requirements)
    {
        Logger.LogInformation($"deleting {requirements}");
        ContextMenuService.Close();

        await using var db = await DbContext.CreateDbContextAsync();

        var confirmed = await DialogService.Confirm($"Are you sure you want to delete this Requirement?", $"Delete Requirement");

        if (confirmed is true)
        {
            db.Requirements.Remove(requirements);
            await db.SaveChangesAsync();
        }

        await RefreshAllRequirements();
    }

    private async Task OpenContextMenuForCard(MouseEventArgs args, int id)
    {
        var requirement = _filteredRequirementsData?.FirstOrDefault(r => r.Id == id);
        if (requirement == null) return;


        var menuItems = new List<ContextMenuItem>();
        menuItems.Add(new ContextMenuItem { Text = "View Requirement", Icon = "visibility", Value = "view" });
        menuItems.Add(new ContextMenuItem { Text = "Edit Requirement", Icon = "edit", Value = "edit" });

        if (requirement.WorkflowStatus != WorkflowStatus.Completed)
        {
            menuItems.Add(new ContextMenuItem { Text = "Delete Requirement", Icon = "delete", Value = "delete" });
        }

        ContextMenuService.Open(args, menuItems, async e =>
        {
            if (e.Value is "view")
            {
                await ViewCard(id);
            }

            if (e.Value is "edit")
            {
                await EditCard(id);
            }

            if (e.Value is "delete")
            {
                await DeleteCard(requirement);
            }
        });
        await Task.CompletedTask;
    }
}