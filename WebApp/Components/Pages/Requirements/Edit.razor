@page "/project/{ProjectId:int}/requirements/edit/{Id:int}"
@rendermode InteractiveServer


@if (_isLoading)
{
    <ProgressBar/>
}
else
{
    <h3 class="text-center text-primary mb-4">Edit Requirement</h3>

    <RadzenTemplateForm Data="@_requirements" Submit="@UpdateRequirement" TItem="Requirements">
        <ValidationSummary class="alert alert-danger"/>

        <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedIndex">
            <Tabs>
                <RadzenTabsItem Text="Requirement">
                    <div class="form-group mb-4">
                        <RadzenLabel Text="Name"/>
                        <RadzenTextBox id="name"
                                       @bind-Value="@_requirements.Name"
                                       class="input-style"
                                       Name="name"/>
                        <RadzenRequiredValidator Component="name" Text="Name is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Description"/>
                        <RadzenTextBox id="description"
                                       @bind-Value="@_requirements.Description"
                                       class="input-style"
                                       Name="description"/>
                        <RadzenRequiredValidator Component="description" Text="Description is recommended"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Priority"/>
                        <RadzenDropDown id="priority"
                                        @bind-Value="@_requirements.Priority"
                                        Data="EnumService.GetEnumValues<Priority>()"
                                        class="input-style"
                                        Name="priority"/>
                        <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                    </div>

                    <div class="form-group mb-4">
                        <RadzenLabel Text="Assigned To"/>
                        <RadzenDropDown id="assignedto"
                                        Data="@_usersList"
                                        @bind-Value="_requirements.AssignedTo"
                                        TextProperty="UserName"
                                        ValueProperty="Id"
                                        class="input-style"
                                        Name="assignedto"/>
                        <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                    </div>

                </RadzenTabsItem>
                <RadzenTabsItem Text="Files">
                    <FileUploadEdit UploadedFiles="_uploadedFiles"
                                    EntityName="@nameof(RequirementsFile)"
                                    ExistingFiles="@RequirementsFilesModel.ExistingFiles"/>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>


        <CreateEditActions EntityName="requirements" CreateEdit="Update"/>
    </RadzenTemplateForm>
}

@code {
    [Parameter] public int Id { get; set; }

    [Parameter] public int ProjectId { get; set; }
    private List<ApplicationUser> _usersList = [];


    int _selectedIndex;
    private Requirements _requirements = new();
    private bool _isLoading = true;

    private readonly List<IBrowserFile>? _uploadedFiles = [];

    protected override async Task OnInitializedAsync()
    {
        _usersList = await GetUsersList();

        _requirements = await RequirementsModel.GetRequirementByIdAsync(Id);

        await RequirementsFilesModel.GetFilesByRequirementId(Id);

        _isLoading = false;
    }
    
    
    private async Task<List<ApplicationUser>> GetUsersList()
    {
        // Get all users
        var users = await UserManager.Users.ToListAsync();

        // Filter out users with the "Admin" role
        var nonAdminUsers = new List<ApplicationUser>();
        foreach (var user in users)
        {
            if (!await UserManager.IsInRoleAsync(user, "Admin"))
            {
                nonAdminUsers.Add(user);
            }
        }

        return nonAdminUsers;
    }


    

    private async Task UpdateRequirement()
    {
    //    _requirements.AssignedTo = UserService.GetUserName(_requirements.AssignedTo, _usersList);
        await RequirementsModel.UpdateRequirement(_requirements, _uploadedFiles);
        
        NavigationManager.NavigateTo($"/project/{ProjectStateService.ProjectId}/requirements");
        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Requirement with Id {_requirements.Id} Updated Successfully");
    }

}