@page "/project/{ProjectId:int}/requirements/create"
@rendermode InteractiveServer

<h3 class="text-center text-primary mb-4">Create Requirement</h3>

<RadzenTemplateForm Data="@_requirements" TItem="Requirements" Submit="CreateNewRequirement">
    <ValidationSummary class="alert alert-danger"/>

    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Requirement">
                <div class="form-group mb-4">
                    <RadzenLabel Text="Name"/>
                    <RadzenTextBox data-testid="name"
                                   @bind-Value="_requirements.Name"
                                   class="input-style"
                                   Name="name"/>
                    <RadzenRequiredValidator Component="name" Text="Name is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Description"/>
                    <RadzenTextArea data-testid="description"
                                    @bind-Value="_requirements.Description"
                                    class="input-style"
                                    Name="description"/>
                    <RadzenRequiredValidator Component="description" Text="Description is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Priority"/>
                    <RadzenDropDown data-testid="priority"
                                    @bind-Value="_requirements.Priority"
                                    Data="EnumService.GetEnumValues<Priority>()"
                                    class="input-style"
                                    Name="priority"/>
                    <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Status"/>
                    <RadzenDropDown data-testid="status"
                                    @bind-Value="_requirements.WorkflowStatus"
                                    Data="EnumService.GetEnumValues<WorkflowStatus>()"
                                    class="input-style"
                                    Name="status"/>
                    <RadzenRequiredValidator Component="status" Text="Workflow Status is required"/>
                </div>

                <div class="form-group mb-4">
                    <RadzenLabel Text="Assigned To"/>
                    <RadzenDropDown data-testid="assignedto"
                                    Data="@_usersList"
                                    @bind-Value="_requirements.AssignedTo"
                                    TextProperty="UserName"
                                    ValueProperty="Id"
                                    class="input-style"
                                    Name="assignedto"/>
                    <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                </div>
                
                
            </RadzenTabsItem>
            <RadzenTabsItem Text="Files">
                <FileUpload UploadedFiles="_uploadedFiles"/>
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>

    <CreateEditActions EntityName="requirements" CreateEdit="Create"/>
</RadzenTemplateForm>

@code {
    private List<ApplicationUser> _usersList = [];

    
    [Parameter] public int ProjectId { get; set; }

    int _selectedIndex;

    private Requirements _requirements = new();

    private readonly List<IBrowserFile>? _uploadedFiles = [];

    protected override async Task OnInitializedAsync()
    {   
        _usersList = await UserService.GetUsersList();
    }
    
    private async Task CreateNewRequirement()
    {
        _requirements = await RequirementsModel.CreateRequirement(_requirements, _uploadedFiles);
        
        NavigationManager.NavigateTo($"project/{ProjectId}/requirements");

        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Requirement with Id {_requirements.Id} Created Successfully");
    }

}