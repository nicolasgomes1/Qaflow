@page "/project/{ProjectId:int}/requirements/create"
@using Microsoft.CodeAnalysis.Operations
@rendermode InteractiveServer

<h3 class="text-center text-primary mb-4">Create Requirement</h3>

<RadzenTemplateForm Data="@_requirements" TItem="Requirements" Submit="CreateNewRequirement">
    <ValidationSummary class="alert alert-danger"/>

    <RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex="@_selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Requirement">
                <RadzenFieldset Text="Requirement Details">
                    <div class="container-fluid p-0">
                        <div class="row mb-4">
                            <div class="col-12">
                                <RadzenLabel Text="Name"/>
                                <RadzenTextBox class="w-100"
                                               data-testid="requirement_name"
                                               @bind-Value="_requirements.Name"
                                               Name="name"/>
                                <RadzenRequiredValidator Component="name" Text="Name is required"/>
                            </div>
                        </div>

                        <div class="row mb-4 col-12">
                            <RadzenLabel Text="Requirements Specification"/>
                            <RadzenDropDown id="requirements_specification"
                                            TValue="int"
                                            Data="@_requirementsSpecificationList"
                                            TextProperty="Name"
                                            ValueProperty="Id"
                                            @bind-Value="_selectedRequirementSpecificationId"
                                            AllowFiltering="true"
                                            AllowVirtualization="true"
                                            Name="requirementsSpecification"/>
                            <RadzenRequiredValidator Component="requirementsSpecification" Text="Requirements Specification is required"/>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <RadzenLabel Text="Description"/>
                                <RadzenTextArea class="w-100"
                                                data-testid="requirement_description"
                                                @bind-Value="_requirements.Description"
                                                Name="description"/>
                                <RadzenRequiredValidator Component="description" Text="Description is required"/>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <RadzenLabel Text="Priority"/>
                                <RadzenDropDown class="w-100"
                                                data-testid="requirement_priority"
                                                Data="EnumService.GetEnumValues<Priority>()"
                                                @bind-Value="_requirements.Priority"
                                                Name="priority"/>
                                <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <RadzenLabel Text="Status"/>
                                <RadzenDropDown class="w-100"
                                                data-testid="requirement_status"
                                                Data="EnumService.GetEnumValues<WorkflowStatus>()"
                                                @bind-Value="_requirements.WorkflowStatus"
                                                Name="status"/>
                                <RadzenRequiredValidator Component="status" Text="Workflow Status is required"/>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-12">
                                <RadzenLabel Text="Assigned To"/>
                                <RadzenDropDown class="w-100"
                                                data-testid="requirement_assignedto"
                                                Data="@_usersList"
                                                @bind-Value="_requirements.AssignedTo"
                                                TextProperty="UserName"
                                                ValueProperty="Id"
                                                Name="assignedto"/>
                                <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
                            </div>
                        </div>
                    </div>
                </RadzenFieldset>
            </RadzenTabsItem>


            <RadzenTabsItem Text="Files">
                <RadzenFieldset Text="Requirements Files">
                    <div class="container-fluid p-0">
                        <FileUpload UploadedFiles="_uploadedFiles"/>
                    </div>
                </RadzenFieldset>
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>

    <CreateEditActions EntityName="requirements" CreateEdit="Create"/>
</RadzenTemplateForm>

@code {
    [Parameter] public int ProjectId { get; set; }

    private List<RequirementsSpecification> _requirementsSpecificationList = [];
    private int _selectedRequirementSpecificationId;

    //TODO Add same approach to create new items
    private List<ApplicationUser> _usersList = [];

    int _selectedIndex;

    private Requirements _requirements = new();
    private readonly List<IBrowserFile>? _uploadedFiles = [];
    
    protected override async Task OnInitializedAsync()
    {
        _usersList = await UserService.GetUsersList();
        _requirementsSpecificationList = await RequirementsModel.GetAssociatedRequirementsSpecifications(_requirements);
    }

    private async Task CreateNewRequirement()
    {
        _requirements.RequirementsSpecification = _requirementsSpecificationList.First(rs => rs.Id == _selectedRequirementSpecificationId);
        _requirements = await RequirementsModel.AddRequirement(_requirements, _uploadedFiles);
        NavigationManager.NavigateTo($"project/{ProjectId}/requirements");

        StateHasChanged();
        await FormNotificationService.NotifySuccess($"Requirement with Id {_requirements.Id} Created Successfully");
    }

}