@page "/project/{ProjectId:int}/requirements/view/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize]


<AlertTitle TitleText="@($"Viewing Requirement {Id}")"/>

<RadzenTabs RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Requirement Details">
            <RadzenRow>
                <RadzenCard Style="width: 50%; padding: 20px; margin-bottom:20px">
                    <div style="display: grid; grid-template-columns: 1fr 2fr; row-gap: 10px;">

                        <RadzenLabel Text="Id:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.Id.ToString()"/>

                        <RadzenLabel Text="Name:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.Name"/>

                        <RadzenLabel Text="Description:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.Description"/>

                        <RadzenLabel Text="Requirements Specification:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_specificationName"/>

                        <RadzenLabel Text="Priority:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.Priority.ToString()"/>

                        <RadzenLabel Text="Created At:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.CreatedAt.ToString(CultureInfo.CurrentCulture)"/>

                        <RadzenLabel Text="Modified At:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.ModifiedAt.ToString(CultureInfo.CurrentCulture)"/>

                        <RadzenLabel Text="Created By:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.CreatedBy"/>

                        <RadzenLabel Text="Modified By:" Style="font-weight: bold;"/>
                        <RadzenLabel Text="@_requirements.ModifiedBy"/>
                    </div>
                </RadzenCard>
            </RadzenRow>
        </RadzenTabsItem>
        <RadzenTabsItem data-testid="requirement_files" Text="@ContextFilesTitle()" Disabled="@RequirementHasNoFiles">
            <FileViewer Files="_existingFiles"
                        EntityName="@nameof(RequirementsFile)"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@ContextTestsTitle()" Disabled="@RequirementsHasNoTests">
            <RadzenRow>
                <RadzenDataGrid TItem="TestCases" Data="@_requirements.LinkedTestCases" Style="margin-top: 10px;">

                    <HeaderTemplate>
                        <h4 class="text-left text-primary mb-4"> Linked Test Cases</h4>
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="Id" Title="Id"/>
                        <RadzenDataGridColumn Property="Name" Title="Name"/>
                        <RadzenDataGridColumn Property="Description" Title="Description"/>
                        <RadzenDataGridColumn>
                            <Template Context="ctx">
                                <div class="btn-group">
                                    <RadzenButton Text="View"
                                                  Click="@(() => NavigationManager.NavigateTo($"/project/{ProjectId}/testcases/view/{ctx.Id}", true))"
                                                  Size="ButtonSize.Small"
                                                  Icon="visibility"/>
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenRow>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<ViewEditActions EntityName="requirements" EntityId="_requirements.Id"/>


@code {
    [Parameter] public int Id { get; set; }

    [Parameter] public int ProjectId { get; set; }

    private List<RequirementsFile>? _existingFiles { get; set; }

    private string ContextFilesTitle()
    {
        return RequirementHasNoFiles ? Loc["files.nofiles"] : Loc["files.existingfiles"];
    }

    private string ContextTestsTitle()
    {
        return RequirementsHasNoTests ? Loc["tests.notests"] : Loc["tests.existingtests"];
    }

    private Requirements _requirements = new();
    private string _specificationName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _existingFiles = await RequirementsFilesModel.GetFilesByRequirementId(Id);
        _requirements = await RequirementsModel.GetRequirementByIdAsync(Id);
        _specificationName = _requirements.RequirementsSpecification?.Name ?? string.Empty;
    }


    private bool RequirementHasNoFiles => _existingFiles != null && !_existingFiles.Any();

    private bool RequirementsHasNoTests => _requirements.LinkedTestCases != null && !_requirements.LinkedTestCases.Any();

    private static Task CanChange(StepsCanChangeEventArgs args)
    {
        return args.SelectedIndex switch
        {
            0 or 1 or 2 => Task.CompletedTask,
            _ => Task.CompletedTask
        };
    }

}