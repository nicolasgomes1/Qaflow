@page "/project/{ProjectId:int}/testexecution/create"
@rendermode InteractiveServer
<RadzenTemplateForm Data="@_testExecution" TItem="TestExecution" Submit="CreateExecution">
    <h3 class="text-center text-primary mb-4">Create Test Execution</h3>
    <ValidationSummary class="alert alert-danger"/>

    <div class="form-group mb-4">
        <RadzenLabel Text="Name"/>
        <RadzenTextBox id="name"
                       @bind-Value="_testExecution.Name"
                       class="input-style"
                       Name="name"/>
        <RadzenRequiredValidator Component="name" Text="Name is required"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Description"/>
        <RadzenTextBox id="description"
                       @bind-Value="_testExecution.Description"
                       class="input-style"
                       Name="description"/>
        <RadzenRequiredValidator Component="description" Text="Description is recommended"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Estimated Time (in minutes)"/>
        <RadzenTextBox id="estimatedTime"
                       @bind-Value="_estimatedTimeInput"
                       Placeholder="Enter time in minutes"
                       class="input-style"
                       Name="estimatedTime"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Priority"/>
        <RadzenDropDown id="priority" @bind-Value="_testExecution.Priority"
                        Data="EnumService.GetEnumValues<Priority>()"
                        class="input-style"
                        Name="priority"/>
        <RadzenRequiredValidator Component="priority" Text="Priority is required"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Test Plan"/>
        <RadzenDropDown id="testplan"
                        Data="_testPlansList"
                        @bind-Value="TestExecutionModel.TestPlanId"
                        TextProperty="Name"
                        ValueProperty="Id"
                        class="input-style"
                        Name="testplan"/>
        <RadzenRequiredValidator Component="testplan" Text="Test Plan is required" DefaultValue="-1"/>
    </div>

    <div class="form-group mb-4">
        <RadzenLabel Text="Assigned To"/>
        <RadzenDropDown id="assignedto"
                        Data="@_usersList"
                        @bind-Value="_testExecution.AssignedTo"
                        TextProperty="UserName"
                        ValueProperty="Id"
                        class="input-style"
                        Name="assignedto"/>
        <RadzenRequiredValidator Component="assignedto" Text="User assignment is required"/>
    </div>

    <CreateEditActions EntityName="testexecution" CreateEdit="Create"/>
</RadzenTemplateForm>

@code {
    private List<ApplicationUser> _usersList = [];

    [Parameter] public int ProjectId { get; set; }

    private string _estimatedTimeInput = string.Empty;

    private List<TestPlans> _testPlansList = [];
    private readonly TestExecution _testExecution = new();


    private string CancelUrl()
    {
        return $"project/{ProjectStateService.ProjectId}/testexecution";
    }

    protected override async Task OnInitializedAsync()
    {
        //   _testPlansList = await TestPlansModel.GetallTestPlans();
        _testPlansList = await TestPlansModel.GetallTestPlansWithWorkflowStatus(WorkflowStatus.Completed);
        _usersList = await UserService.GetUsersList();
    }

    private async Task CreateExecution()
    {
        _testExecution.EstimatedTime = TimeSpan.FromMinutes(int.TryParse(_estimatedTimeInput, out var minutes) ? minutes : 0);

        await TestExecutionModel.CreateTestExecution(_testExecution);
        NavigationManager.NavigateTo($"/project/{ProjectStateService.ProjectId}/testexecution", true);
    }

}