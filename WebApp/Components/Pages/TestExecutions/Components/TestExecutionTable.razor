@attribute [Authorize]

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="10"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@_testexecution"
                ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value="@_selectedTestExecutions"
                @ref="_dataGrid">
    <HeaderTemplate>
        <RadzenButton Text="Test Execution"
                      data-testid="create-testexecutions"
                      Click='() => NavigationManager.NavigateTo($"/project/{ProjectId}/testexecution/create")'
                      Size="ButtonSize.Medium"
                      Icon="add"/>
        <DeleteallDataForModel EntityName="@(nameof(TestExecution))"
                               EntityList="_testexecution"/>
        <ExportGridDataCsv Grid="_dataGrid"/>
        <RadzenButton Icon="assessment"
                      MouseEnter="@(args => AppTooltipService.ShowTooltip(args, "Make Assessment"))"
                      MouseLeave="@AppTooltipService.HideTooltip"
                      Click='() => NavigationManager.NavigateTo($"project/{ProjectId}/testexecutions/manage")'/>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(TestExecution.Id)" Filterable="false" Title="ID" Frozen="true"
                              Width="80px" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.Name)" Title="Name" Frozen="true" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.Description)" Title="Description" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.Version)" Title="Version" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.Priority)" Title="Priority" Width="auto">
            <Template Context="ctx">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(ctx.Priority)">
                    @ctx.Priority
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(TestExecution.TestPlan.Name)" Title="Test Plan" Width="auto">
            <Template Context="testExecution">
                @if (testExecution.TestPlan != null)
                {
                    <RadzenLabel Text="@testExecution.TestPlan.Name"/>
                }
                else
                {
                    <RadzenLabel Text="Not linked to any test plan"/>
                }
            </Template>
        </RadzenDataGridColumn>


        <RadzenDataGridColumn Property="@nameof(TestExecution.ExecutionStatus)" Title="Status" Width="auto">
            <Template Context="context">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleExecution(context.ExecutionStatus)">
                    @context.ExecutionStatus
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(TestExecution.ModifiedAt)" Title="Modified At" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.WorkflowStatus)" Title="Status" Width="auto">
            <Template Context="testexecution">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleWorkflowStatus(testexecution.WorkflowStatus)">
                    @testexecution.WorkflowStatus
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(TestExecution.AssignedTo)" Title="Assigned To" Width="auto">
            <Template Context="testexecution">
                @Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(testexecution.AssignedTo)).Result
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(TestExecution.IsActive)" Title="Is Active" Width="auto"/>
        <RadzenDataGridColumn Property="@nameof(TestExecution.ArchivedStatus)" Title="Is Archived" Width="auto">
            <Template Context="ctx">
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStyleArchivedStatus(ctx.ArchivedStatus)">
                    @ctx.ArchivedStatus
                </RadzenBadge>
            </Template>
        </RadzenDataGridColumn>

        <IndexActions TItem="TestExecution" EntityName="TestExecution" ProjectId="ProjectId"/>

    </Columns>
</RadzenDataGrid>

@code {
    [Parameter] public Func<Task<List<TestExecution>>>? OnInitializedMethod { get; set; }
    [EditorRequired] [Parameter] public int ProjectId { get; set; }

    private IList<TestExecution> _selectedTestExecutions = [];
    private List<TestExecution> _testexecution = [];

    private RadzenDataGrid<TestExecution> _dataGrid = new();

    protected override async Task OnInitializedAsync()
    {
        if (OnInitializedMethod != null)
        {
            var result = await OnInitializedMethod();
            _testexecution = result;
        }
    }

}
