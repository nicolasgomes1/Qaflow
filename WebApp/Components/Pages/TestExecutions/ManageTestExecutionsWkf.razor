@page "/project/{ProjectId:int}/testexecutions/manage"
@rendermode InteractiveServer
@attribute [Authorize]
@inject ILogger<ManageTestExecutionsWkf> Logger


<TestExecutionDialogView @ref="_testExecutionDialogView" Id="-1"/>
<TestExecutionDialogEdit @ref="_testExecutionDialogEdit" Id="-2" ProjectId="@ProjectId"
                         OnTestExecutionUpdated="RefreshAllTestExecutions"/>

<AlertTitle TitleText="Managing Test Executions"/>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
        <RadzenButton Icon="assignment_ind"
                      data-testid="my_assignment"
                      Text="My Assignments" Click="RefreshAssignedTestExecutions"/>
        <RadzenButton Icon="assignment"
                      data-testid="all_assignment"
                      Text="All Test Executions" Click="RefreshAllTestExecutions"/>
        <RadzenTextBox Placeholder="Search test executions..."
                       Change=@(args => SearchTestExecutions(args))
                       style="width: 300px"/>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End">
        <TestExecutionDialogCreate Title="@Loc["create.testexecution"]" ProjectId="ProjectId"
                                   OnTestExecutionCreated="@RefreshAssignedTestExecutionsFromDialog"/>
        <RadzenButton Icon="list"
                      Click='@(() => NavigationManager.NavigateTo($"/project/{ProjectId}/testexecution", true))'/>
    </RadzenStack>
</RadzenStack>

<RadzenDropZoneContainer TItem="TestExecution" Data="_filteredtestExecutionData"
                         ItemSelector="@ItemSelector"
                         ItemRender="WkfManagementCardColor.OnItemRender<TestExecution>"
                         CanDrop="@CanDrop"
                         Drop="@OnDrop">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
            <RadzenDropZone Value="WorkflowStatus.New"
                            class="rz-display-flex rz-flex-column rz-background-color-warning-lighter rz-border-warning-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="New" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.InReview"
                            class="rz-display-flex rz-flex-column rz-background-color-info-lighter rz-border-info-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="In Review" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Completed"
                            class="rz-display-flex rz-flex-column rz-background-color-success-lighter rz-border-success-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>

            <RadzenDropZone Value="WorkflowStatus.Reopened"
                            class="rz-display-flex rz-flex-column rz-background-color-danger-lighter rz-border-danger-light rz-border-radius-2 rz-p-4"
                            Style="flex: 1; gap: 1rem;">
                <RadzenText Text="Reopened" TextStyle="TextStyle.Subtitle2"/>
            </RadzenDropZone>
        </RadzenStack>
    </ChildContent>
    <Template>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem"
                     ContextMenu="args => OpenContextMenuForCard(args,context.Id)">
            <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                <strong>@context.Name</strong>
                <RadzenBadge BadgeStyle="@StylesService.GetBadgeStylePriority(context.Priority)">
                    @context.Priority
                </RadzenBadge>
                <RadzenStack Orientation="Orientation.Vertical">
                    <p>@Task.Run(async () => await UserService.GetUserNameFromUserIdAsync(context.AssignedTo)).Result</p>
                </RadzenStack>
                <RadzenStack>
                    <p>@context.Version</p>
                </RadzenStack>

            </RadzenStack>
        </RadzenStack>
    </Template>
</RadzenDropZoneContainer>





@code {
    [Parameter] public int ProjectId { get; set; }
    private List<TestExecution>? _testExecutionData = [];
    private List<TestExecution>? _filteredtestExecutionData = [];

    private TestExecutionDialogView _testExecutionDialogView = null!;
    private TestExecutionDialogEdit _testExecutionDialogEdit = null!;

    protected override async Task OnInitializedAsync()
    {
        _testExecutionData = await TestExecutionModel.GetActiveTestExecutionsAsyncWkf(ProjectId);
        _filteredtestExecutionData = _testExecutionData;
    }


    Func<TestExecution, RadzenDropZone<TestExecution>, bool> ItemSelector = (item, zone) => item.WorkflowStatus == (WorkflowStatus)zone.Value;

    Func<RadzenDropZoneItemEventArgs<TestExecution>, bool> CanDrop = request =>
    {
        return request.FromZone == request.ToZone ||
               Math.Abs((int)request.Item.WorkflowStatus - (int)request.ToZone.Value) == 1;
    };


    async void OnDrop(RadzenDropZoneItemEventArgs<TestExecution> args)
    {
        if (args.FromZone != args.ToZone)
        {
            args.Item.WorkflowStatus = (WorkflowStatus)args.ToZone.Value;

            args.Item.ArchivedStatus = args.Item.WorkflowStatus switch
            {
                WorkflowStatus.Completed => ArchivedStatus.Archived,
                WorkflowStatus.InReview => ArchivedStatus.Active,
                WorkflowStatus.Reopened => ArchivedStatus.Active,
                WorkflowStatus.New => ArchivedStatus.Active,
                _ => args.Item.ArchivedStatus
            };

            await using var db = await DbContext.CreateDbContextAsync();
            args.Item.ModifiedBy = UserService.GetCurrentUserNameAsync().Result;
            db.TestExecution.Update(args.Item);
            await db.SaveChangesAsync();
        }

        if (args.ToItem == null || args.ToItem == args.Item) return;
        _testExecutionData?.Remove(args.Item);
        _testExecutionData?.Insert(_testExecutionData.IndexOf(args.ToItem), args.Item);
    }

    private async Task RefreshAssignedTestExecutionsFromDialog()
    {
        _testExecutionData = await TestExecutionModel.GetActiveTestExecutionsAsyncWkf(ProjectId);
        _filteredtestExecutionData = _testExecutionData;

        StateHasChanged();
    }


    private async Task RefreshAssignedTestExecutions()
    {
        _testExecutionData = await TestExecutionModel.GetTestExecutionsAssignedToCurrentUser(ProjectId);
        _filteredtestExecutionData = _testExecutionData;
        StateHasChanged();
    }

    private async Task RefreshAllTestExecutions()
    {
        _testExecutionData = await TestExecutionModel.GetTestExecutionsAssignedToAll(ProjectId);
        _filteredtestExecutionData = _testExecutionData;
        StateHasChanged();
    }

    private string _searchTerm = "";


    private void SearchTestExecutions(string searchTerm)
    {
        _searchTerm = searchTerm?.ToLower() ?? "";
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredtestExecutionData = _testExecutionData;
        }
        else
        {
            _filteredtestExecutionData = _testExecutionData?
                .Where(r => r.Name != null && r.Name.ToLower().Contains(_searchTerm))
                .ToList();
        }

        StateHasChanged();
    }

    private async Task OpenContextMenuForCard(MouseEventArgs args, int id)
    {
        var testExecution = _filteredtestExecutionData?.FirstOrDefault(r => r.Id == id);
        if (testExecution == null) return;


        var menuItems = new List<ContextMenuItem>();
        menuItems.Add(new ContextMenuItem { Text = "View Test Execution", Icon = "visibility", Value = "view" });
        menuItems.Add(new ContextMenuItem { Text = "Edit Test Execution", Icon = "edit", Value = "edit" });

        if (testExecution.WorkflowStatus != WorkflowStatus.Completed)
        {
            menuItems.Add(new ContextMenuItem { Text = "Delete Test Execution", Icon = "delete", Value = "delete" });
        }

        ContextMenuService.Open(args, menuItems, async e =>
        {
            switch (e.Value)
            {
                case "view":
                    await ViewCard(id);
                    break;
                case "edit":
                    await EditCard(id);
                    break;
                case "delete":
                    await DeleteCard(testExecution);
                    break;
            }
        });
        await Task.CompletedTask;
    }

    private async Task ViewCard(int id)
    {
        await _testExecutionDialogView.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object?>
            {
                { nameof(_testExecutionDialogView.Id), id }
            })
        );
        await _testExecutionDialogView.ViewInlineDialog();
        ContextMenuService.Close();
    }

    private async Task EditCard(int id)
    {
        Logger.LogInformation($"editing {id}");

        await _testExecutionDialogEdit.SetParametersAsync(
            ParameterView.FromDictionary(new Dictionary<string, object?>
            {
                { nameof(_testExecutionDialogEdit.Id), id }
            })
        );
        await _testExecutionDialogEdit.ShowInlineDialog();
        ContextMenuService.Close();
    }

    private async Task DeleteCard(TestExecution testExecution)
    {
        Logger.LogInformation("deleting {te}", testExecution);

        var confirmed = await DialogService.Confirm($"Are you sure you want to delete this Test Execution?", $"Delete Test Execution");

        if (confirmed is true)
        {
            await TestExecutionModelv2.DeleteTestExecutionAsync(testExecution);
        }

        await RefreshAllTestExecutions();
    }

}