@page "/project/{ProjectId:int}/testexecution/view/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize]

<RadzenButton Click="DuplicateCurrentTestExecution"></RadzenButton>

@*Version 2*@
<RadzenTabs @bind-SelectedIndex="@_selectedIndex">
    <Tabs>
        <RadzenTabsItem Text="Test Execution">
            <ViewTestExecutionData Id="Id" ProjectId="ProjectId"/>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Past Test Execution">
            <PastTestExecutionsTable Id="Id" ProjectId="ProjectId"/>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Associated Test Cases">
            <AssociatedTestCasesTable Id="Id" ProjectId="ProjectId"/>
        </RadzenTabsItem>


        <RadzenTabsItem Text="Results">
            <ViewTestCaseExecution Id="Id" ProjectId="ProjectId"/>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
<div style="margin-top: 10px;">
    <RadzenButton Text="Edit"
                  Click='() => NavigationManager.NavigateTo($"/project/{ProjectId}/testexecution/edit/{_testExecution.Id}")'
                  Disabled="@(_testExecution.IsActive == false)"/>
    <RadzenButton Text="Back" Click='() => NavigationManager.NavigateTo($"/project/{ProjectId}/testexecution")'/>
</div>



@code
{
    [Parameter] public int Id { get; set; }

    [Parameter] public int ProjectId { get; set; }

    private TestExecution _testExecution = new();
    private TestExecution _newTestExecution = new();
    int _selectedIndex;

    int _newId;

    protected override async Task OnInitializedAsync()
    {
        _testExecution = await TestExecutionModel.GetTestExecutionbyIdAsync(Id);
        _newId = Id + 1;
    }

    private async Task DuplicateCurrentTestExecution()
    {
        _newTestExecution = await TestExecutionModelv2.DuplicateExecutionAsync(Id, ProjectId);
        NavigationManager.NavigateTo($"/project/{ProjectId}/testexecution/view/{_newTestExecution.Id}");
    }


}
